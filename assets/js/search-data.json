{
  
    
        "post0": {
            "title": "Week 2, Day 1 (Introduction to Artificial Intelligence and Computer Vision)",
            "content": "Artificial Intelligence . Human has always been fascinated by the ideas of putting the intelligence to the machine. Still, it was until 1956, the term &quot;Artificial Intelligence&quot; was coined, at a conference at Dartmouth College, in Hanover, New Hampshire. At such time, people were very optimistic about the future of AI. And the fundings and interest invest in the field get larger and larger. But making a machine to behave just like a human is not an easy task. With the researchers fail to deliver the promise, and also with several reports criticizing progress in AI, the funding and interest in the field get dropped off, people later often refers this as the &quot;AI winter&quot; which happend during 1974s-1980. . Even though there are some private and public fundings to the field, the whole hype about &quot;Aritificial Intelligence&quot; gets cooled down. And around 1987s to 1993, the field experienced another &quot;winter&quot;. . It was only after 1997, IBM&#39;s Deep Blue became the first computer to beat a chess champion, Russian grandmaster Garry Kasparov, that the term &quot;AI&quot; is coming back to the reserach ground. . The field of artificial intelligence finally had its breakthrough moment in 2012 at the ImageNet Large Scale Visual Recognition Challenge (ILSVRC) with the introduction of Alex-Net. (ILSVRV) is a vision competition and before Alex-Net, the error rate hover around 26%. But with Alex-Net, the error rate comes down to only 16.4%. That is a huge accomplishment and people now see hope in Deep Neural Networks Again. . Nowaday, when people talk about &quot;Artificial Intelligence&quot;, they often refers to &quot;Deep Neural Networks&quot;, a branch of Machine learning that imitates the human brain cells as to function and process data. And with modern hardware advanced, big data accessable and algorithms optimized, the field of Deep Learning is getting more and more research interestes and improvements everyday. . Computer Vision . The main purpose of computer vision is for computer to have the &quot;vision&quot;, ability to perceive the world. To do that, we have to know how human vision system work. It is now known that, human vision is hierarchical. Neurons detect simple features like edges, then feed into more complex features like shapes, and then eventually feed into more complex visual representations. . Today, we have the AI algorithms, that mimic the hierarchical architecture of the human vision system called the CNN(Convolutional Neural Networks). CNNs use convolutional layers to extract the features in images and then use fully connected layers for the output. . . AI Available Today . Even though many people think that AI is far away from our daily life, it is not quite true. When we scroll on social Media, let&#39;s say Facebook, we get the newsfeed from Facebook&#39;s recommandation AI. And when we travel using &quot;Google Maps&quot;, it automatically generates the traffic conditions using AI. What we didn&#39;t realize is, AI has already been a part of our daily lives and improving our life quality. . Neural Network . Neural Network is the basic building block for the Deep Neural Networks. . Let&#39;s first do a simple classification on two data points. Given the x-coordinate of the data point, we will have to classify wherether this point belongs to red or blue. For that, we will need to find the threshold value, decision boundary or decision surface, whatever you may call it. For this particular example, the threshold value would be 2.5. . So, we would write this with the logic of taking x-coordinate as the input,x, and check if it is smaller than 2.5, if True, then, the color is &quot;Red&quot;, and if False, the color is &quot;Blue&quot;. . . We can also write the function instead of logic with x-2.5, and check if positive or negative. . But, still, we do not know the confidence of prediction value by the above equation. For such purposes, Sigmoid function is introduced. It keeps the output range from 0~1. So, if the output from sigmoid is near 1, let&#39;s say, 0.9, we would say that this point is 90% sure to be the &quot;Blue&quot; Point. And if the output from the sigmoid is 0.2, we would say this point is 20% sure to be the &quot;Blue&quot; Point or (1-0.2 = 0.8) 80% sure to be the &quot;Red&quot; Point. . . . Let&#39;s apply this logic with 2 dimensions(x and y). Remember when we introduced the threshold value, we refered the point as the decision boundary or decision surface. That is because that value(threshold) makes the decision for the model in a single dimension. For 2 dimensional cases, we will need a Line (2D) instead of Point (1D) as a decision boundary for classification. . So, as the dimension for the dataset increases, the dimension of the decision surface also increases. In 1D : $(x-2.5)$ : Only 1 variable In 2D : $(0.5x -y -1)$ : 2 variables . For this particular example, let&#39;s say, the equation for the line is $ y = 0.5x - 1$, then, it can be derived to $ 0.5x - y - 1$. Here, we introduce &quot;Weight&quot;, the coefficient of variables, and &quot;Bias&quot;, which is a constant value. . And with the extra loss function, the basic logistic regression model is developed. Loss function for the model determines how badly the model is performing. The loss function is also known as &quot;Binary cross-entropy&quot; Loss. . . After finding the Loss of the model, We would like to Update(Optimize) the model for better classification performance. To update the model, gradient descent method is introduced. . First, the variables(parameters) that we can update in the model are &quot;weight&quot; and &quot;bias&quot;. So, we need to know, how the change in weight effect loss. Mathematically, this is called the derivative. So, we would like to know $ frac{dL}{dW}$. . And since the equation for the loss is: $L = -[ylog hat{y} + (1-y)log(1- hat{y})]$, L depends on $ hat{y}$ $ hat{y} = sigma{z}$, $ hat{y}$ depends on z $Z = W^TX + B$, Z depands on W, . We can use chain Rule to find the derivative of L and W with the following equation. . $ frac{dL}{dW} = (y - hat{y}) * X$ . If you want to know the exact steps of derivation, here is this link from stack exchange. . After that, we can update the weight values with gradient descent equation: $W = W - alpha frac{dL}{dW}$ $ alpha$ here means the learning rate, which is a hyperparameter we can adjust to get the better convergence rate for the model. . . Forward and Backward Propagation . Forward propagation is when the data points pass through the model and output the loss value. Backward propagation happen to update the model parameters(W) with the loss or cost, accumulation of loss value gathered during the forward propagation. . . The reason why this is called the gradient descent is becasue $ frac{dL}{dW}$ will approach to zero, minimal value, while updating the model parameter. . . Deep Neural Network . What happens if we add more units of cells to the previous model? . The main problem with just simply stacking cells is that the model is still acting linearly. So, we need to introduce some kind of non-linearity to the model, by adding &quot;activation function&quot; to each output of the cell. . . Now, we will introduce Relu (Rectified Linear Unit), which behaves just like linear function if the output is higher than 0. . The equation for the relu function is as follow: . $relu(z) = begin{cases} z &amp; if z&gt;0 0 &amp; if z&lt;=0 end{cases}$ . And the derivative for the relu is $ frac{d}{dz}relu(z) = begin{cases} 1 &amp; if z&gt;0 0 &amp; if z&lt;=0 end{cases}$ . The main advantage of using relu is that it does not activate all the neurons at the same time. When the value of z is negative, relu turns it off, returning the zero value, indicating that this feature is not important for the neurons to learn. And since only a certain number of neurons get activated, it is far more computationally efficient than sigmoid and other activation functions. . If you would like to learn more about various Activation functions, please visit this blog post for more details. . Recap . To conclude of what we have learned, we need several things to construct a neural network: &quot;Weights and Bias&quot;, &quot;Activation Functions&quot; and &quot;Loss Function&quot;. . To update(learning) the model, the optimization method &quot;Gradient Descent&quot; was used. . Further Resources . If you would like to learn more about neural networks, you can visit Deeplearning.ai on youtube. .",
            "url": "https://ytu-cvlab.github.io/mce-51069/deep_learning/computer_vision/2020/12/19/week2-day1.html",
            "relUrl": "/deep_learning/computer_vision/2020/12/19/week2-day1.html",
            "date": " • Dec 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 1, Day 2 (Python for Data Science)",
            "content": "Notebooks and Assignments . Please download all the lectures and assignment notebooks of week 1 (Day 2) here. We have also posted a guide video on downloading &amp; accessing materials on our youtube channel. . Learning Tips . We Strongly recommand learning with playing. We provide notebooks for students to get started. If you get trouble with learning, please feel free to reach out to us on facebook and email. . Data Types . In python, there are built-in data-types, some of which are described below: . Int (1 ,100, 99) | Float (1.0, 3.14, 2.718) | String (&quot;Myanmar&quot;, &quot;Burma&quot;) | Boolean (True, False) | Complex (1+0j) | null (None) | To describe the various properties in the real world, we must use different data types. . e.g., if we want to describe a person&#39;s name, we could use String. Int for his/her age, Float for his/her height in (cm) and Boolean if he/she is graduated or not. . The main take away from this lecture notebook is to know the differences between data types and their usage. . Four Most Used Data Types . We can store data of different types in variable names. See the example below: . # Int int1 = 5 int2 = 3 # Float float1 = 1. float2 = 3.14 # String string1 = &quot;Hello&quot; string2 = &#39;World&#39; # Boolean bool1 = True bool2 = False . print function is used to print the values of the variable to the output screen. . print(int1) . 5 . We can check the datatype of the variable by using type function: . type(int1) . int . Arithmetic Operations on Number Data Types . We could do arithmetic operations on Number Data Types (Int and Float) as shown below: . int1 = 5 int2 = 3 # We can add, subtract two elements of &#39;Int&#39; dtype. print(int1 + int2) # Addition print(int1 - int2) # Subtraction print(int1 * int2) # Multiplication print(int1 / int2) # Division print(int1 % int2) # Remainder print(int1**int2) # Power print(&quot;&quot;) float1 = 1. float2 = 3.14 # We can also, do operations on `Float` dtype. print(float1 + float2) print(float1 - float2) print(float1 * float2) print(float1 / float2) print(float1 % float2) print(float1**float2) . . 8 2 15 1.6666666666666667 2 125 4.140000000000001 -2.14 3.14 0.3184713375796178 1.0 1.0 . String Operations . We can use &#39;+&#39; operator to concatenate two strings. . # Simple concatenation of two strings concatenate_string = string1 + string2 print(concatenate_string) . HelloWorld . We can also use f-Strings method for better formating of string. . In f-Strings method, we can insert variables in the string format. . # f-Strings method. f_string = f&quot;Hello World, welcome to the wonderland&quot; print(f_string) string1 = &quot;Hello&quot; string2 = &quot;World&quot; f_string_var = f&quot;{string1} {string2}, This is testing the f-Strings&quot; print(f_string_var) . . Hello World, welcome to the wonderland Hello World, This is testing the f-Strings . . Important: One thing to be aware of in Python, we can not add two variables of different data types. In the example described below, we try to add Int and String data types, which is not possible. . var_a = &quot;Hello&quot; var_b = 5 print(var_a + var_b) . . TypeError Traceback (most recent call last) &lt;ipython-input-22-7f4a263b8c2b&gt; in &lt;module&gt; 2 var_b = 5 3 -&gt; 4 print(var_a + var_b) TypeError: can only concatenate str (not &#34;int&#34;) to str . # Or this print(int(var_a) + var_b) . . ValueError Traceback (most recent call last) &lt;ipython-input-23-c93ae652aa67&gt; in &lt;module&gt; 1 # Or this -&gt; 2 print(int(var_a) + var_b) ValueError: invalid literal for int() with base 10: &#39;Hello&#39; . When converting String to Int, if the value in that String is Int, then we can do addition. . # we could, for example var_a = &quot;5&quot; var_b = 5 print(int(var_a) + var_b) . . 10 . Boolean Operation . Boolean includes only two values, True and False. . Note: The capital letter and small letter must be correctly spelled.eg. true will not work. Boolean variables are often used in conditional operations, such as if and while. . bool1 = True bool2 = False # Check if a varible is True if bool1: print(&quot;bool1 variable is True&quot;) # This print statement is not working # because bool2 is not True if bool2: print(&quot;bool2 variable is True&quot;) . . bool1 variable is True . # Check if a variable is False (not True) if not bool1: print(&quot;bool1 variable is False&quot;) if not bool2: print(&quot;bool2 variable is False&quot;) . . bool2 variable is False . # We could use AND, OR operation too. if bool1 and bool2: print(&quot;Both Variables are True&quot;) if bool1 or bool2: print(&quot;At least one variable is True&quot;) . . At least one variable is True . Further Resources for Data Types . If you want to learn more about data types and their operations in more details, please visit to official Python documentation. You can also learn more about it in this blog post about Basic Data Types in Python. . Data Structures . Python Data Structures are used to store and collect data. There are four basic built-in data structures in Python. . # Simple Creation of each four types of structures list_obj = [1, 2, 3, 4, 1, 2, 3, 4] set_obj = {1, 2, 3, 4, 1, 2, 3, 4} tuple_obj = (1, 2, 3, 4, 1, 2, 3, 4) dict_obj = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4, &#39;e&#39;:1, &#39;f&#39;:2} . print(type(list_obj), list_obj) print(type(set_obj), set_obj) print(type(tuple_obj), tuple_obj) print(type(dict_obj), dict_obj) . . &lt;class &#39;list&#39;&gt; [1, 2, 3, 4, 1, 2, 3, 4] &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} &lt;class &#39;tuple&#39;&gt; (1, 2, 3, 4, 1, 2, 3, 4) &lt;class &#39;dict&#39;&gt; {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 1, &#39;f&#39;: 2} . List . The Most commonly used data structure in Python, List, has the following properties : . Element are accessable with order | Mutable (variable values can be changed) | list_height = [170, 172, 174, 160, 178] print(&quot;Heights of student in class...&quot;) print(list_height) . Heights of student in class... [170, 172, 174, 160, 178] . Access with Index . . Note: If we access element that is out of range, it will rasie IndexError as follows . print(&quot;Student A height : &quot;, list_height[0]) print(&quot;Student B height : &quot;, list_height[1]) print(&quot;Student A height : &quot;, list_height[2]) print(&quot;Student B height : &quot;, list_height[3]) print(&quot;Student A height : &quot;, list_height[4]) print(&quot;Student B height : &quot;, list_height[5]) . . Student A height : 170 Student B height : 172 Student A height : 174 Student B height : 160 Student A height : 178 . IndexError Traceback (most recent call last) &lt;ipython-input-4-d5a3a372c0b9&gt; in &lt;module&gt; 4 print(&#34;Student B height : &#34;, list_height[3]) 5 print(&#34;Student A height : &#34;, list_height[4]) -&gt; 6 print(&#34;Student B height : &#34;, list_height[5]) IndexError: list index out of range . IndexError: list index out of range. Because there are only 5 elements in list, list_height[5] request for 6th element, which is out of range. . Access with Iteration(For Loop) . num_student = 0 for height in list_height: num_student += 1 print(height, end = &#39;,&#39;) print(f&quot; nThere are {num_student} students in the class&quot;) . . 170,172,174,160,178, There are 5 students in the class . &#39;&#39;&#39; Simple Program: Convert height information in &quot;cm&quot; to &quot;feet&quot; &#39;&#39;&#39; # Convert cm to feet for height_cm in list_height: height_feet = height_cm * 0.0328 # cm to feet equation print(f&quot;Studnet height : {height_cm} cm {height_feet:.2f} feet&quot;) . . Studnet height : 170 cm 5.58 feet Studnet height : 172 cm 5.64 feet Studnet height : 174 cm 5.71 feet Studnet height : 160 cm 5.25 feet Studnet height : 178 cm 5.84 feet . List with different Datatype . We can store, not just one datatype, but variables with different data types in a list. . student_A = [&quot;Aung Aung&quot;, &quot;McE&quot;, 3, 6] student_B = [&quot;Soe Pyae&quot;, &quot;Civil&quot;, 3, 6] print(&quot;Student A Info : &quot;, student_A) print(&quot;Student B Info : &quot;, student_B) . . Student A Info : [&#39;Aung Aung&#39;, &#39;McE&#39;, 3, 6] Student B Info : [&#39;Soe Pyae&#39;, &#39;Civil&#39;, 3, 6] . # But Be Aware, We do not know which element contain what information.. print(student_A[2] + student_A[3]) print(student_A[0] + student_A[1]) print(student_A[1] + student_A[2]) . . 9 Aung AungMcE . TypeError Traceback (most recent call last) &lt;ipython-input-5-b71be46f223e&gt; in &lt;module&gt; 2 print(student_A[2] + student_A[3]) 3 print(student_A[0] + student_A[1]) -&gt; 4 print(student_A[1] + student_A[2]) TypeError: can only concatenate str (not &#34;int&#34;) to str . TypeError :can only concatenate str to str | int to int This often happen in List when we try to store different data type into one list. It is hard to get exact index for each element. For that, in python, we use Dictionary to store key-value paired information. . Dictionary . When we walk into a library to find books, we search the book by its title, author or published year. Python use the same idea to store value for the varible, by creating the key for that value. Thus Dictionary in python is key-value paired data structure. . # List student_A_list = [&quot;Aung_Paing&quot;, &quot;McE&quot;, 3, 6] student_B_list = [&quot;Soe_Pyae&quot;, &quot;Civil&quot;, 3, 6] # Dictionary student_A_dict = {&quot;Name&quot; : &quot;Aung_Paing&quot;, &quot;Major&quot; : &quot;McE&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} student_B_dict = {&quot;Name&quot; : &quot;Soe_Pyae&quot;, &quot;Major&quot; : &quot;Civil&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} print(student_A_list) print(student_A_dict) . . [&#39;Aung_Paing&#39;, &#39;McE&#39;, 3, 6] {&#39;Name&#39;: &#39;Aung_Paing&#39;, &#39;Major&#39;: &#39;McE&#39;, &#39;Batch&#39;: 3, &#39;Year&#39;: 6} . # If we want to get &quot;Name&quot; info for student_A name_student_A = student_A[0] print(name_student_A) print() # But in dict, we just need to specified it. We do not need to remember the index of that info. print(&quot;Name : &quot;, student_A_dict[&quot;Name&quot;]) print(&quot;Major : &quot;, student_A_dict[&quot;Major&quot;]) print(&quot;Batch : &quot;, student_A_dict[&quot;Batch&quot;]) print(&quot;Year : &quot;, student_A_dict[&quot;Year&quot;]) . . Aung_Paing Name : Aung_Paing Major : McE Batch : 3 Year : 6 . Tuple . Sometimes, we need immutable data. For example, Coordinate of a location, your Birthday, your significant other&#39;s Phone Number or may be even your gene code. The data that we want to access but must be changed are stored with Tuple. . home_coordinate = (123, 456) birthday = (11, 1, 1998) print(type(birthday)) print(birthday) . . &lt;class &#39;tuple&#39;&gt; (11, 1, 1998) . # Let&#39;s try to access the month with index... month = birthday[1] print(month) # Let&#39;s try to change the day.... birthday[1] = 10 . . 1 . TypeError Traceback (most recent call last) &lt;ipython-input-11-c728f5c5b1e0&gt; in &lt;module&gt; 4 5 # Let&#39;s try to change the day.... -&gt; 6 birthday[1] = 10 TypeError: &#39;tuple&#39; object does not support item assignment . Thus, we can see the data in tuples cannot be changed . Set . Set as the name suggest, is a set of collection. Sets ignore the order and the number of elements in a collection and only store the representatives in that collection. . set_obj = {1, 2, 3, 1, 2, 3, 4} print(type(set_obj)) print(set_obj) . . &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} . # We cannot access the elements in the set set_obj[0] . . TypeError Traceback (most recent call last) &lt;ipython-input-25-c6b65031723d&gt; in &lt;module&gt; 1 # We could not access the element in that set. -&gt; 2 set_obj[0] TypeError: &#39;set&#39; object is not subscriptable . Tips . Error When you encounter an Error in the code, try the following steps: . Stay calm &amp; Read the error message carefully | Copy and paste the error message in google search or stackoverflow. | Ask for help in forums if necessary. | There are more than 8 million python users in the world and it is very likely that someone has encounterd the same problem as you did. So, don&#39;t hesitate to search for help. . We can check the specification of the variable by: . set_obj? . Type: set String form: {1, 2, 3, 4} Length: 4 Docstring: set() -&gt; new empty set object set(iterable) -&gt; new set object Build an unordered collection of unique elements. . Further Resources for Data Structure . If you would like to know more about Data Structure in Python. Please visit official Python cocumentation. You can also learn more about it in this blog post about Common Python Data Structure . Conditionals &amp; Loops in Python . Conditionals . if Statements in Python allow us to tell the computer to perform alternative actions based on a certain set of results. . In other words, we are telling the computer : &quot;Hey if this case happens, perform some action&quot; . We can then expand the idea further with elif and else statements, which allows us to tell the computer: &quot;Hey if this case happens, perform some action. Else, if another case happens, perform some other action. Else, if none of the above cases happened, perform this action&quot; . Let&#39;s go ahead and look at the syntax format for if-else cases to get a better idea of this: . # Simple if-else case rain = False if not rain: print(&quot;The weather is fine today, I am going out.&quot;) else: print(&quot;It is raining, I cannot go out...&quot;) . . The weather is fine today, I am going out. . # Or this way: if rain==True: print(&quot;It is raining, I cannot go out...&quot;) else: print(&quot;Today weather is fine, I am going out.&quot;) . . Today weather is fine, I am going out. . # sometime, in the program, we have to deal with other conditions rain = False weekday = True if not rain and weekday: print(&quot;I am going to School Today&quot;) elif not rain and not weekday: print(&quot;I am going out to play&quot;) else: # Rain and weekday print(&quot;Even though it is raining, I still have to go to school ...&quot;) . . I am going to School Today . Also, we could check the String and Int variables: . Note: here, when checking if Condition == True, we use == instead of = . # Check String operation = &quot;add&quot; if operation == &quot;add&quot;: print(&quot;Add Operation&quot;) elif operation == &quot;sub&quot;: print(&quot;Sub Operation&quot;) elif operation == &quot;mul&quot;: print(&quot;Multiplication Operation&quot;) elif operation == &quot;div&quot;: print(&quot;Division Operation&quot;) . . Add Operation . # Check Int int_obj = 10 # int_obj = -1 # Comment out to test # int_obj = 0 # int_obj = None if int_obj: print(&quot;There exists value for that int_obj&quot;) else: print(&quot;sorry, the input is None or Zero&quot;) . . There exists value for that int_obj . Loops . There are two main types of loops in python. . for | while | Generally, For iterates for the given range, While checks the condition and continue iteration until condition is False. . for range(): . while condition: . For . A for loop acts as an iterator in Python; it goes through items that are in a sequence or any other iterable item. Objects, that we&#39;ve learned and we can iterate over, include strings, lists, tuples, and even built-in iterables for dictionaries, such as keys or values. . Here&#39;s the general format for a for loop in Python: . for item in object: statements to do things . # Loop for 10 times for i in range(10): print(i, end=&quot; &quot;) print() . . 0 1 2 3 4 5 6 7 8 9 . # Let&#39;s access element from list list_obj = [1, 2, 3, 4, 5, 6, 7, 8, 9] for obj in list_obj: print(obj, end=&quot; &quot;) . . 1 2 3 4 5 6 7 8 9 . Tuples have a special quality when it comes to for loops. If you are iterating through a sequence that contains tuples, the item can actually be the tuple itself, this is an example of tuple unpacking. During the for loop we will be unpacking the tuple inside of a sequence and we can access the individual items inside that tuple. . list1 = [(0,1),(2,3),(4,5)] for tup in list1: print(tup) . . (0, 1) (2, 3) (4, 5) . # Now with unpacking! for (t1,t2) in list1: print(t1, end=&quot; &quot;) . . 0 2 4 . In the above case, the first element of each tuple is printed out. . # Now with unpacking! for (t1,t2) in list1: print(t2, end=&quot; &quot;) . . 1 3 5 . Here, the second element of each tuple gets printed out. . With tuples in a sequence we can access the items inside of them through unpacking! The reason this is important is because many objects will deliver their iterables through tuples. . Nested For Loop . Nested For, means for loop inside a for loop . nested_list = [[1, 2, 3, 4], [5, 6, 7, 8]] # To access nested list, we could use nested for loop for row in nested_list: for col in row: print(col, end=&quot; &quot;) . . 1 2 3 4 5 6 7 8 . While . The while statement in Python is one of most general ways to perform iteration. A while statement will repeatedly execute a single statement or group of statements as long as the condition is true. The reason it is called a &#39;loop&#39; is because the code statements are looped through over and over again until the condition is no longer met. . The general format of a while loop is: . while condition: code statements else: final code statements . Let’s look at a few simple while loops in action. . # While loop and loop for 10 times. i = 0 while i&lt;10: print(i, end=&quot; &quot;) i+=1 . . 0 1 2 3 4 5 6 7 8 9 . x = 0 while x &lt; 5: print(&#39;x is currently:&#39;,x) print(&#39;x is still less than 5, keep adding 1 to x&#39;) x += 1 . . x is currently: 0 x is still less than 5, keep adding 1 to x x is currently: 1 x is still less than 5, keep adding 1 to x x is currently: 2 x is still less than 5, keep adding 1 to x x is currently: 3 x is still less than 5, keep adding 1 to x x is currently: 4 x is still less than 5, keep adding 1 to x . Notice how many times the print statements occurred and how the while loop kept going until the True condition was met, which occurred once x==5. It&#39;s important to note that once this occurred the code stopped. Let&#39;s see how we could add an else statement: . x = 0 while x &lt; 5: print(&#39;x is currently: &#39;,x) print(&#39;x is still less than 5, keep adding 1 to x&#39;) x += 1 else: print(&#39;All Done!&#39;) . . x is currently: 0 x is still less than 5, keep adding 1 to x x is currently: 1 x is still less than 5, keep adding 1 to x x is currently: 2 x is still less than 5, keep adding 1 to x x is currently: 3 x is still less than 5, keep adding 1 to x x is currently: 4 x is still less than 5, keep adding 1 to x All Done! . When the condition isn&#39;t true anymore, that is, x is now 5, and so the else statement All Done! is printed out instead. . Further Resources for Conditionals and Loops . If you want to learn more about conditional statements and loops in more details, please visit to official Python documentation. You can also learn more about conditional statements, for loops and while loops in these posts. . Functions . Functions are great arsenal in python. . You could think of functions as a factory, process (do function) the raw inputs (Arguments) to desired products (output). There are two types of functions in Python. . Built-in Functions | User-Defined Functions | Built-in Functions . We&#39;ve already seen a few example of built-in functions when learning about Data Types in Python. Built-in Functions, come along with python and could be very useful when you need them. . Following are some examples of built-in functions. . int_obj = -5 print(int_obj) # Find the absolute value abs_int = abs(int_obj) print(abs_int) # Convert Int to String int2str = str(int_obj) print(int2str, type(int2str)) # Check the datatype print(isinstance(int_obj, int)) . . -5 5 -5 &lt;class &#39;str&#39;&gt; True . We can also use built-in functions to construct data-structures. . set_obj = set((1, 2, 3, 1, 2, 3)) print(set_obj) list_obj = list((1, 2, 3, 1, 2, 3)) print(list_obj) tuple_obj = tuple((1, 2, 3, 1, 2, 3)) print(tuple_obj) dict_obj = dict([(1,&quot;a&quot;), (2, &quot;b&quot;)]) print(dict_obj) . . {1, 2, 3} [1, 2, 3, 1, 2, 3] (1, 2, 3, 1, 2, 3) {1: &#39;a&#39;, 2: &#39;b&#39;} . . User-Defined Functions . This section will consist of explaining what a function is in Python and how to create one. Functions will be one of our main building blocks when we construct larger and larger amounts of code to solve problems. . . Typical function in python consists of the following parts: . Input (Arguments in functions) | Process (What this function do) | Output (What this function return) | In short, IPO for constructing a function. . Functions will be one of most basic levels of reusing code in Python, and it will also allow us to start thinking of program design (we will dive much deeper into the ideas of design when we learn about Object Oriented Programming). . def Statements . Let&#39;s see how to build out a function&#39;s syntax in Python. It has the following form: . def function_name(arg1,arg2): &#39;&#39;&#39; This is where the function&#39;s Document String (docstring) goes &#39;&#39;&#39; # Do stuff here # Return desired result . We begin with def then a space, followed by the name of the function. Try to keep names relevant though they can be variable, for example len() is a good name for a length() function. Also be careful with names, you wouldn&#39;t want to call a function the same name as a built-in functions(such as len). . Next comes a pair of parentheses with a number of arguments separated by a comma. These arguments are the inputs for your function. You&#39;ll be able to use these inputs in your function and reference them. After this you put a colon. . Now here is the important step, you must indent to begin the code inside your function correctly. Python makes use of whitespace to organize code. Lots of other programing languages do not do this, so keep that in mind. . Let&#39;s see the example of creating basic printing function. . # Define a function # No argument def print_hello(): print(&quot;Hello World&quot;) print_hello() # Call the funtion . . Hello World . Let&#39;s see some functions with input arguments. . # Argument with user name def print_hello(name): &quot;&quot;&quot; Print The User Name Args: name(String) -&gt; User name Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome.&quot;) print_hello(&quot;Aung Aung&quot;) # Call the funtion . . Hello Aung Aung! Welcome. . # Arguments with different datatypes def print_hello(name, age): &quot;&quot;&quot; Print The User Name Args: name (String) -&gt; User name age (Int) -&gt; User Age Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome. You are now {age} years old.&quot;) print_hello(&quot;Aung Aung&quot;, 22) # Call the funtion . . Hello Aung Aung! Welcome. You are now 22 years old. . Functions arguments can also have default values. See the example below. . # Argument having default value def print_hello(name, age = 18): &quot;&quot;&quot; Print The User Name Args: name (String) -&gt; User name age (Int) -&gt; User Age Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome. You are now {age} years old.&quot;) # Because the &#39;age&#39; argument has default value, we don&#39;t need to provide value. print_hello(&quot;Aung Aung&quot;) print_hello(&quot;Aung Aung&quot;, 22) . . Hello Aung Aung! Welcome. You are now 18 years old. Hello Aung Aung! Welcome. You are now 22 years old. . Using return . Let&#39;s see some examples that use a return statement. return allows a function to return a result that can then be stored as a variable, or used in whatever manner a user wants. . def add_num(num1,num2,num3): return num1 + num2 + num3 . # Calling the function add_num(1,2,3) . . 6 . # Can also save as variable due to return result = add_num(1,2,3) print(result) . . 6 . # Let&#39;s try to make a power function def power(base_num, pow_num): &quot;&quot;&quot; Calculate the power of base_num Args: base_num(Int) -&gt; Base number for calculation pow_num(Int) -&gt; Power number for calculation Return: power_num(Int) -&gt; Power number for calculation &quot;&quot;&quot; return base_num ** pow_num # We can directly print out the value print(power(2, 3)) # Or we can assign the output value to a variable and print. output = power(3, 2) print(output) . . 8 9 . In the above function: We get the process of Calculate the Power of base_num, Input of base_num and pow_num. Output for power_num. . Further Resources for Functions . If you want to learn more about built-in functions in more details, please visit to official Python documentation. You can also check this blog post about Functions. . Classes . Classes are the main building blocks in Object Oriented Programming (OOP). OOP is one of the hardest parts for beginners when they are first starting to learn Python. But we will get you through OOP in the following section. So, let&#39;s start. . . Intro to OOP . Let&#39;s start the lesson by remembering about the Basic Python Objects. For example: . lst = [0, 1, 2, 3] . When we print out the type of that lst . print(type(lst)) . &lt;class &#39;list&#39;&gt; . This is the built-in Class of list. And we can call methods on that list with . lst.append(2) lst . [0, 1, 2, 3, 2] . Here, append is the method that the &lt;class &#39;list&#39;&gt; has. . Objects . Everything in Python is an object. We can use type() to check the type of object: . print(type(1)) print(type([])) print(type(())) print(type({})) . . &lt;class &#39;int&#39;&gt; &lt;class &#39;list&#39;&gt; &lt;class &#39;tuple&#39;&gt; &lt;class &#39;dict&#39;&gt; . So we know all these things are objects, so how can we create our own Object types? That is where the class keyword comes in. . Class and Attributes . class . User defined objects are created using the class keyword. The class is a blueprint that defines the nature of a future object. From classes we can construct instances. An instance is a specific object created from a particular class. For example: . t = (1, 2, 3) . We created the object t which was an instance of a tuple object. . Now, Let&#39;s try a step up and create our own class. . # Construct a new object type called Student class Student: pass # Instance of the class Student x = Student() print(type(x)) . &lt;class &#39;__main__.Student&#39;&gt; . Most of the programmers give classes a name that starts with a capital letter by convention. Note how x is now the instance of a Student class. In other words, we instantiate the Student class. . At the inside of the class we currently just have pass keyword. But we can define class attributes and methods. . An attribute is a characteristic of an object.A method is an operation we can perform with the object. . For example, we can create a class called Dog. An attribute of a dog may be its breed or its name, while a method of a dog may be defined by a .bark() method which returns a sound. . Attributes . The syntax for creating an attribute is: . self.attribute = something . There is a special method called: . __init__() . This method is used to initialize the attributes of an object. For example: . class Student: def __init__(self, name): self.name = name a = Student(name = &#39;Aung Paing&#39;) b = Student(name = &#39;Soe Pyae Phyo&#39;) . Let&#39;s break down what we have above. The special method . __init__() . is called automatically right after the object has been created. . def __init__(self, name): . Each attribute in a class definition begins with a reference to the instance object. It is by convention named self. The name is the argument. The value is passed during the class instantiation. . self.name = name . . Note: self.name can be given any desire variable names; no need to be name. For example, self.student_name = name Now we have created two instances of the Student class. With two different names, we can then use these attributes like this: . a.name . &#39;Aung Aung&#39; . b.name . &#39;Soe Soe&#39; . Note how we don&#39;t have any parentheses after name; this is because it is an attribute and doesn&#39;t take any arguments. . Lets add more attributes to our Student class. . class Student: def __init__(self, name, major, batch, age, passedlastterm): self.name = name self.major = major self.batch = batch self.age = age self.passedlastterm = passedlastterm student_a = Student(&quot;Myo Myo&quot;, &quot;EC&quot;, 3, 24, True) student_b = Student(&quot;Su Su&quot;, &quot;Text&quot;, 2, 18, False) print(&quot; nStudent a Data :&quot;) print(student_a.name) print(student_a.major) print(student_a.batch) print(student_a.age) print(student_a.passedlastterm) . . Student a Data : Myo Myo EC 3 24 True . Methods . Methods are functions defined inside the body of a class. They are used to perform operations with the attributes of our objects. Methods are a key concept of the OOP pattern. They are essential to dividing responsibilities in programming, especially in large applications. . Let&#39;s go through an example of creating a Square class: . class Square: # Square gets instantiated def __init__(self, length = 4): self.length = length self.area = length * length # Resetting length def setLength(self, new_length): self.length = new_length self.area = new_length * new_length s = Square() print(&#39;Length is &#39;, s.length) print(&#39;Area is &#39;, s.area) s.setLength(6) print(&#39;Now length is &#39;, s.length) print(&#39;Now area is &#39;, s.area) . . Length is 4 Area is 16 Now length is 6 Now area is 36 . In this Square class, we have defined two attributes: self.length and self.area. . def setLength(self, new_length): . is called method of the class, which we use to interact with the user and manipulate the class attributes. Notice how we used self. notation to reference attributes of the class within the method calls. . Now, Let&#39;s add some methods to Student class. . class Student: def __init__(self, name, major, batch, age, passedlastterm): self.name = name self.major = major self.batch = batch self.age = age self.passedlastterm = passedlastterm def print_result(self): if self.passedlastterm: print(&quot;Congrats, you can move to next term.&quot;) else: print(&quot;Sorry, you need to retake the exam.&quot;) student_a = Student(&quot;Myo Myo&quot;, &quot;EC&quot;, 3, 24, True) print(&quot;Student a Result&quot;) student_a.print_result() . . Student a Result Congrats, you can move to next term. . Inheritance . Inheritance is a way to form new classes using classes that have already been defined. The newly formed classes are called derived classes, the classes that we derive from are called base classes. Important benefits of inheritance are code reuse and reduction of complexity of a program. The derived classes override or extend the functionality of base classes. . Let&#39;s use our Student class again. . # Inheritance and not change anything. class ExchangeStudent(Student): pass . In this example, we have two classes: Student and ExchangeStudent. The Student is the base class, the ExchangeStudent is the derived class. . The derived class inherits the functionality of the base class. This is shown in the example below. . # ExchangeStudent should have all properties and methods Student has. student_ex = ExchangeStudent(&quot;Htet Htet&quot;, &quot;Civil&quot;, 1, 25, True) print(&quot; nStudent ex Result&quot;) student_ex.print_result() . Student ex Result Congrats, you can move to next term. . Further Resources for Class . If you want to learn more about Object Oriented Programming (OOP) in more details, please visit to official Python documentation. You can also check this blog post about OOP. . Icons made by Freepik from www.flaticon.com",
            "url": "https://ytu-cvlab.github.io/mce-51069/python/2020/12/14/week1-day2.html",
            "relUrl": "/python/2020/12/14/week1-day2.html",
            "date": " • Dec 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 1, Day 1 (Introduction to the course)",
            "content": "Anaconda and Jupyter Notebook . Anaconda is a Data Science Platform, which comes with Data Science related packages and libraries, such as numpy and matplotlib, in Python. The aforementioned reason for using Anaconda is just one of the many good reasons and there are certainly other benefits. If you are interested in it, Please visit their website to explore more. . In this course, we decide to get Anaconda installed for every student, and make the installation video guides for Anaconda available in this website. . Jupyter Notebook is an open source, web application that allow users to create and share documents that contain live codes, equations, visualizations and narrative text. Quote :Jupyter.org . Anaconda Installation on Windows . . Anaconda Installation on Mac . . How to use Jupyter Notebook . . Student ID and Attendance . Please fill out this form from this link to get your student ID. . We will record attendance in every session with google forms provided only in zoom chat. . Assignment . Please submit your week 1 assignments from this link. We will return your assignment scores after the deadline day (you can check on your submission form). Please note that we will return your final grade only if you submit all the assignments. .",
            "url": "https://ytu-cvlab.github.io/mce-51069/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "relUrl": "/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "date": " • Dec 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": ".",
          "url": "https://ytu-cvlab.github.io/mce-51069/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ytu-cvlab.github.io/mce-51069/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}