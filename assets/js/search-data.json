{
  
    
        "post0": {
            "title": "Week 1, Day 1 (Introduction to the course)",
            "content": "Anaconda and Jupyter Notebook . Anaconda is a Data Science Platform, which comes with Data Science related packages and libraries, such as numpy and matplotlib, in Python. The aforementioned reason for using Anaconda is just one of the many good reasons. There are certainly other benefits. And if you are interested in it, Please visit their website. So, in this course, we decide to get Anaconda installed for every student, and make the installation video guide for Anaconda available in this website. . Jupyter Notebook is an open source, web application that allow users to create and share documents that contain live codes, equations, visualizations and narrative text. Quote :Jupyter.org . Anaconda Installation on Windows . . Anaconda Installation on Mac . . How to use Jupyter Notebook . . Student ID and Attendance . Please fill out this form from this link to get your student ID. . We will record attendance in every session with google forms provided only in zoom chat. . Assignment . Please submit your week 1 assignments from this link. We will return your assignment scores after the deadline day (you can check on your submission form). Please note that we will return your final grade only if you submit all the assignments. .",
            "url": "https://ytu-cvlab.github.io/mce-51069/assignment/installation_guide/student_id/2020/12/16/week1-day1.html",
            "relUrl": "/assignment/installation_guide/student_id/2020/12/16/week1-day1.html",
            "date": " • Dec 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 1, Day 2 (Python for Data Science)",
            "content": "Learning Tips . We Strongly recommand learning with playing. We provide notebooks for students to get started. If you get trouble with learning, please feel free to reach out to us facebook, email. . Data Type . Data Type of a variable describe the properties that variable hold. In python, there are some built-in data-type, which described below. . Int (1 ,100, 99) | Float (1.0, 3.14, 2.718) | String (&quot;Myanmar&quot;, &quot;Burma&quot;) | Boolean (True, False) | Complex (1+0j) | null (None) | To describe the various properties in the real world, we must use different data type. . eg.If we want to describe a person&#39;s name, we would use String. Int for his age, Float for his height in (cm), and Boolean for his is_graduated, and so on. . The main take away from this course is knowing the difference data type and their usage. . We could create difference variables in following ways: . # Int int1 = 5 int2 = 3 # Float float1 = 1. float2 = 3.14 # String string1 = &quot;Hello&quot; string2 = &#39;World&#39; # Boolean bool1 = True bool2 = False . Operations on Data Type . Arithmetic Operation on Number Data Type . There are many built-in, already implemented, operations we could do in python. Like, for example, for arithmetic operations: . Addition (+) | Subtraction (-) | Multiplication (*) | Division (/) | Arithemetic operations, as the name suggest, can only be used in Int and Float Data Type. . int1 = 5 int2 = 3 # We can add, subtract two elements of &#39;Int&#39; dtype. print(int1 + int2) # Addition print(int1 - int2) # Subtraction print(int1 * int2) # Multiplication print(int1 / int2) # Division print(int1 % int2) # Remainder print(int1**int2) # Power print() float1 = 1. float2 = 3.14 # We can add, subtract two elements of &#39;Float&#39; dtype. print(float1 + float2) print(float1 - float2) print(float1 * float2) print(float1 / float2) print(float1 % float2) print(float1**float2) . . 8 2 15 1.6666666666666667 2 125 4.140000000000001 -2.14 3.14 0.3184713375796178 1.0 1.0 . String Operation . for variable that is of String data type, we could Concatenate Two string, Or we could use f String format for better formating of string. . In f String, we could enter varibles in the string format. . # Simple concatenate two string concatenate_string = string1 + string2 print(concatenate_string) # F string format. f_string = f&quot;Hello World, Welcome to the wanderland&quot; print(f_string) f_string_var = f&quot;{string1} {string2}, This is testing the f String&quot; print(f_string_var) . . HelloWorld Hello World, Welcome to the wanderland Hello World, This is testing the f String . . Note: We could only do operations on the same data type. For example, Int variable and String variable could not be added (will raise an error). . a = 10 b = &#39;hello world&#39; print(a + b) . . TypeError Traceback (most recent call last) &lt;ipython-input-4-857b62d6dea8&gt; in &lt;module&gt; 2 a = 10 3 b = &#39;hello world&#39; -&gt; 4 print(a + b) TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . TypeError :can only concatenate str to str | int to int . Different data type cannot be added (concatenate) together. . Reference : Python Official Documentation . We always recommand students to go check out the official document if possible. It might be a bit hard at first, but it definetly worth the effort. . Data Structure . Data Structure is a collection of variables. Based on the method of collecting the varibles, the four basic data structure are presented in Python. . List | Tuple | Dictionary | Set | # Simple Creation of each four types of structures list_obj = [1, 2, 3, 4, 1, 2, 3, 4] set_obj = {1, 2, 3, 4, 1, 2, 3, 4} tuple_obj = (1, 2, 3, 4, 1, 2, 3, 4) dict_obj = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4, &#39;e&#39;:1, &#39;f&#39;:2} print(type(list_obj), list_obj) print(type(set_obj), set_obj) print(type(tuple_obj), tuple_obj) print(type(dict_obj), dict_obj) . . &lt;class &#39;list&#39;&gt; [1, 2, 3, 4, 1, 2, 3, 4] &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} &lt;class &#39;tuple&#39;&gt; (1, 2, 3, 4, 1, 2, 3, 4) &lt;class &#39;dict&#39;&gt; {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 1, &#39;f&#39;: 2} . List . The Most commonly used data structure in Python, List has the following properties : . Element Accessable with ordered | Mutable (variable value can be changed) | list_height = [170, 172, 174, 160, 178] print(&quot;Heights of student in class...&quot;) print(list_height) . . Heights of student in class... [170, 172, 174, 160, 178] . Access with Index . . Note: If we access element that is out of range, it will rasie IndexError as follow . print(&quot;Student A height : &quot;, list_height[0]) print(&quot;Student B height : &quot;, list_height[1]) print(&quot;Student A height : &quot;, list_height[2]) print(&quot;Student B height : &quot;, list_height[3]) print(&quot;Student A height : &quot;, list_height[4]) print(&quot;Student B height : &quot;, list_height[5]) . . Student A height : 170 Student B height : 172 Student A height : 174 Student B height : 160 Student A height : 178 . IndexError Traceback (most recent call last) &lt;ipython-input-4-d5a3a372c0b9&gt; in &lt;module&gt; 4 print(&#34;Student B height : &#34;, list_height[3]) 5 print(&#34;Student A height : &#34;, list_height[4]) -&gt; 6 print(&#34;Student B height : &#34;, list_height[5]) IndexError: list index out of range . IndexError: list index out of range. Because there are only 5 elements in list, list_height[5] request for 6th element, which is out of range. . Access with Iteration(For Loop) . num_student = 0 for height in list_height: num_student += 1 print(height, end = &#39;,&#39;) print(f&quot; nThere are total of {num_student} students in the class&quot;) . . 170,172,174,160,178, There are total of 5 students in the class . List with different Datatype . We could store, not just one datatype, but variables with different data type in a list. . student_A = [&quot;Aung Aung&quot;, &quot;McE&quot;, 3, 6] student_B = [&quot;Soe Pyae&quot;, &quot;Civil&quot;, 3, 6] print(&quot;Student A Info : &quot;, student_A) print(&quot;Student B Info : &quot;, student_B) . . Student A Info : [&#39;Aung_Paing&#39;, &#39;McE&#39;, 3, 6] Student B Info : [&#39;Soe_Pyae&#39;, &#39;Civil&#39;, 3, 6] . # But Be Aware, We do not know which element contain what information.. print(student_A[2] + student_A[3]) print(student_A[0] + student_A[1]) print(student_A[1] + student_A[2]) . . 9 Aung_PaingMcE . TypeError Traceback (most recent call last) &lt;ipython-input-11-b71be46f223e&gt; in &lt;module&gt; 2 print(student_A[2] + student_A[3]) 3 print(student_A[0] + student_A[1]) -&gt; 4 print(student_A[1] + student_A[2]) TypeError: can only concatenate str (not &#34;int&#34;) to str . TypeError :can only concatenate str to str | int to int . Different data type cannot be added (concatenate) together. For that, in python, we use Dictionary to store information. . Dictionary . When we walk into a library and want to find a book, we search by the book title, the book author or may be the published year. Python use the same idea to store value for the varible, by creating the key for that value. That is why you often heard dict in python is key-value paired. . # Dictionary student_A_dict = {&quot;Name&quot; : &quot;Aung_Paing&quot;, &quot;Major&quot; : &quot;McE&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} student_B_dict = {&quot;Name&quot; : &quot;Soe_Pyae&quot;, &quot;Major&quot; : &quot;Civil&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} print(student_A_dict) print(student_B_dict) . . {&#39;Name&#39;: &#39;Aung_Paing&#39;, &#39;Major&#39;: &#39;McE&#39;, &#39;Batch&#39;: 3, &#39;Year&#39;: 6} {&#39;Name&#39;: &#39;Soe_Pyae&#39;, &#39;Major&#39;: &#39;Civil&#39;, &#39;Batch&#39;: 3, &#39;Year&#39;: 6} . # In Dict, we only need to specify the &#39;Key&#39; to find the &#39;Value&#39;. print(&quot;Name : &quot;, student_A_dict[&quot;Name&quot;]) print(&quot;Major : &quot;, student_A_dict[&quot;Major&quot;]) print(&quot;Batch : &quot;, student_A_dict[&quot;Batch&quot;]) print(&quot;Year : &quot;, student_A_dict[&quot;Year&quot;]) . . Name : Aung_Paing Major : McE Batch : 3 Year : 6 . Tuple . Sometimes, we need immutable data. Like the Coordinate of a location, your lovely Birthday Date, his/her Phone Number or may be even your gene code. These information, we want to access them, but not change them, are created with Tuple. . home_coordinate = (123, 456) birthday = (11, 1, 1998) print(type(birthday)) print(birthday) . . &lt;class &#39;tuple&#39;&gt; (11, 1, 1998) . # Let&#39;s try to access the month I was borned... month = birthday[1] print(month) # Let&#39;s try to change the day I was borned.... birthday[1] = 10 . . 1 . TypeError Traceback (most recent call last) &lt;ipython-input-21-37b3c9f0dcce&gt; in &lt;module&gt; 4 5 # Let&#39;s try to change the day I was borned.... -&gt; 6 birthday[1] = 10 TypeError: &#39;tuple&#39; object does not support item assignment . Set . Set as the name suggest, is a set of collection. it does not care about the order of that collection, it does not even care how many elements are in that collection, it only cares about the representative in that collection. . set_obj = {1, 2, 3, 1, 2, 3, 4} print(type(set_obj)) print(set_obj) . . &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} . Reference : Python Official Documentation on Data Structure . Conditional &amp; Loop in Python . In a Program, there always exist logics. Like, if I am Happy in coding, I would like to get job in Coding. . Conditional . In Python, such conditional are conducted by if-else statement. . # Simple if-else case rain = False if not rain: print(&quot;Today weather is fine, I am going out.&quot;) else: print(&quot;It is raining, I cannot go out...&quot;) . . Today weather is fine, I am going out. . Loop . There are two main types of loop in python. . for | while | For iterate for the given range, While check the condition and continue iteration until condition is False. . for range(): . while condition: . Reference : Python Official Document on if-else statement . Functions . Functions are great arsenal in python. You could think of functions as a factory, process(do function) the raw inputs(Arguments) to Desired products(output). There are two types of functions in Python. . Built-in Function Reference : Python Official | User Defined Function Reference : Python Official | . Built-in Functions . Built-in Functions, come along with python, could be very useful when you need them. Following are some examples for such case. . int_obj = -5 print(int_obj) # Find the absolute value abs_int = abs(int_obj) print(abs_int) # Convert Int to String int2str = str(int_obj) print(int2str, type(int2str)) # Check the datatype print(isinstance(int_obj, int)) # Also, we could use built-in Functions to construct data-structures. set_obj = set((1, 2, 3, 1, 2, 3)) print(set_obj) . . -5 5 -5 &lt;class &#39;str&#39;&gt; True {1, 2, 3} . . User-Defined Functions . We could defind functions as we would like the program to process. Typical function in python consists of following parts. . . When Constructing a function, what you, the developer, need to know are: . Input (Arguments in functions) | Process (What this function do) | Output(What this function output) | In short, IPO for making a function. . # Make a power calculator with function def power(base_num, pow_num): &quot;&quot;&quot; Calculate the power of base_num Args: base_num(Int) -&gt; Base number for calculation pow_num(Int) -&gt; Power number for calculation Return: power_num(Int) -&gt; Power number for calculation &quot;&quot;&quot; return base_num ** pow_num # We could directly print out the value print(power(2, 3)) # Or we could assign that value to a varible and print. output = power(3, 2) print(output) . . 8 9 . Class . Built-in Class | User Defined Inheritance | . | Class in python acts like a template. eg. When we think of a person, he has properties of [Name, Age, Position, Hobby] and so on. These properties can be applied to every one who is a person. . So, we create a template &#39;Class&#39; and then, create objects, one person each for that class. . . Built-in Class . There are already many built-in classes that come with python. . int_obj = int() print(type(int_obj)) bool_obj = bool() print(type(bool_obj)) . &lt;class &#39;int&#39;&gt; &lt;class &#39;bool&#39;&gt; . . User-Defined Class . We could create a class for our own need. Assign properties and methods to that class . Inheritance . We could create another class, which has all attributes and methods as Student, but it also has other attributes and methods. We call that inheritance .",
            "url": "https://ytu-cvlab.github.io/mce-51069/python/2020/12/14/week1-day2.html",
            "relUrl": "/python/2020/12/14/week1-day2.html",
            "date": " • Dec 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 1, Day 3 (Introduction to Image Processing in Python)",
            "content": "Numpy . Numpy is a strong third-party library emphasize on numerical calculation in python. In short, numpy has a ndArray data type, which can process numbers, a large numbers of numbers, more efficiently than List. . The codes below are reference from Numpy Official Doc . The Basics . Create Array . There are many ways to create numpy array. The simplest one : from List. . array = np.array(list) . Or we could create array with functions come with numpy. . array = np.arange(start, stop, step) . But, with np.arange, we could not control the number of element in that array. So: . array = np.linspace(start, stop, num) . Or, we could just create array from the fly just describe the shape of array that we want. . zeros = np.zeros(shape_in_tuple) ones = np.ones(shape_in_tuple) empty = np.empty(shape_in_tuple) . import numpy as np # Let&#39;s Create an array array = np.array([1, 2, 3, 4, 5]) # Print Out the Array print(array) array = np.arange(2, 20, 2) print(array) #Create with the count of array wanted array = np.linspace(0, 2, 5) print(array) # Initialize array for place holder array = np.zeros((5,5)) print(array) array = np.ones((5,5)) print(array) array = np.empty((5,5)) print(array) . . [1 2 3 4 5] [ 2 4 6 8 10 12 14 16 18] [0. 0.5 1. 1.5 2. ] [[0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] . Basic Operations . # Simple Arithmetic Operations array_a = np.array([1, 2, 3]) array_b = np.array([4, 5, 6]) print(&quot;Addition of two array : t&quot;, array_a + array_b) print(&quot;Subtraction of two array : t&quot;, array_a - array_b) print(&quot;Multiplication of two array : t&quot;, array_a * array_b) print(&quot;Division of two array : t&quot;, array_a / array_b) . . Addition of two array : [5 7 9] Subtraction of two array : [-3 -3 -3] Multiplication of two array : [ 4 10 18] Division of two array : [0.25 0.4 0.5 ] . # Or we could apply basic math functions [sin, cos] to arrays. sine_array = np.sin(array_a) cos_array = np.cos(array_a) print(sine_array, &#39; n&#39;, cos_array) . . [0.84147098 0.90929743 0.14112001] [ 0.54030231 -0.41614684 -0.9899925 ] . Indexing, Slicing and Iterating . Accessing element in ndArray is just better than in List. We could access one element by its Index: . element = array[0] . or in range, Slicing . element = array[0:5] . . Array Manipulation . We could manipulate shape of array in numpy. . Ordering . Sort or find the Max, Min value in the array. . . Basic Statistics . Numpy is originally designed for Data Science, so, it normally have most of the statictics calculations.We could find the basic statistics value Mean with np.mean(), Standard Deviation with np.std() and Variance with np.var() in the array. . Simple Comparison . The Strength of Numpy is its Broadcasting, which make calculation much, much faster than List. List have to iterate through each and every element to access them, while Numpy can iteration one time and get access to all elements. . Code Complexity . # Add 1: to list for i in range(len(list_obj)): for j in range(len(list_obj[0])): for k in range(len(list_obj[0][0])): list_obj[i][j][k] += 1 # Add 1: to Array np_array += 1 . Speed . We test a function, same input for both List and Numpy Array, but get different result time. See more detail in code. Every time you run, the value might be a little different, but: . In array, it only costs 4.61ms when in list it costs 186ms. That is so much faster in numpy. . Matplotlib . Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. . matplotlib - https://matplotlib.org/ . matplotlib.pyplot - https://matplotlib.org/api/pyplot_api.html . 1. Simple Plots . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.plot.html . 2. Using Subplots . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.subplots.html . 3. Scatter plots . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.scatter.html . 4. Histograms . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.hist.html . OpenCV . OpenCV (Open Source Computer Vision Library: http://opencv.org) is an open-source library that includes several hundreds of computer vision algorithms. . https://docs.opencv.org/master/index.html . 1. Reading &amp; Writing Images . Basic Functions . cv2.imread(path,flag) . cv2.imshow(&#39;title&#39;,image) . cv2.waitKey(sec) . cv2.destroyAllWindows() . cv2.imwrite(&#39;filename&#39;,image) . source - https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html . 2. Drawing shapes . cv2.line(image, start_point, end_point, color, thickness) . cv2.cvtColor(src,method) . cv2.rectangle(image, start_point, end_point, color, thickness) . cv2.circle(image, center_coordinates, radius, color, thickness) . cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) . sources - . https://www.geeksforgeeks.org/ . https://docs.opencv.org/master/d6/d6e/group__imgproc__draw.html . 3. Face Detection with HaarCascade Detector . cv2.CascadeClassifier(filename) . cv2.CascadeClassifier.detectMultiScale( image,objects,scaleFactor,minNeighbors,flags,minSize,maxSize) . https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html . https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html . 4. Resizing images . cv2.resize(input,(size_x,size_y),fx,fy,interpolation) . https://docs.opencv.org/master/da/d6e/tutorial_py_geometric_transformations.html . 5. Splitting &amp; Merging images . b,g,r = cv2.split(color_image) . image = cv2.merge((r,g,b)) . https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_core/py_basic_ops/py_basic_ops.html . 6. Image translation &amp; rotation . cv2.warpAffine(image, M, output_size, flags, borderMode, borderValue) . cv2.getRotationMatrix2D(center, angle, scale) . https://docs.opencv.org/3.4/d4/d61/tutorial_warp_affine.html . https://www.programcreek.com/python/example/89459/cv2.getRotationMatrix2D . https://docs.opencv.org/3.4/da/d54/group__imgproc__transform.html .",
            "url": "https://ytu-cvlab.github.io/mce-51069/image_processing/overview/2020/12/12/week1-day3.html",
            "relUrl": "/image_processing/overview/2020/12/12/week1-day3.html",
            "date": " • Dec 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": ". This Lecture is Conducted by: Dr.Theint Theint Thu Aung Paing Aw Thura Phone Thiha Kyaw .",
          "url": "https://ytu-cvlab.github.io/mce-51069/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ytu-cvlab.github.io/mce-51069/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}