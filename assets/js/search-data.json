{
  
    
        "post0": {
            "title": "Week 1, Day 3 (Introduction to Image Processing in Python)",
            "content": "Numpy . Numpy is a strong third-party library emphasize on numerical calculation in python. In short, numpy has a ndArray data type, which can process numbers, a large numbers of numbers, more efficiently than List. . The codes below are reference from Numpy Official Doc . The Basics . Create Array . There are many ways to create numpy array. The simplest one : from List. . array = np.array(list) . Or we could create array with functions come with numpy. . array = np.arange(start, stop, step) . But, with np.arange, we could not control the number of element in that array. So: . array = np.linspace(start, stop, num) . Or, we could just create array from the fly just describe the shape of array that we want. . zeros = np.zeros(shape_in_tuple) ones = np.ones(shape_in_tuple) empty = np.empty(shape_in_tuple) . import numpy as np # Let&#39;s Create an array array = np.array([1, 2, 3, 4, 5]) # Print Out the Array print(array) array = np.arange(2, 20, 2) print(array) #Create with the count of array wanted array = np.linspace(0, 2, 5) print(array) # Initialize array for place holder array = np.zeros((5,5)) print(array) array = np.ones((5,5)) print(array) array = np.empty((5,5)) print(array) . . [1 2 3 4 5] [ 2 4 6 8 10 12 14 16 18] [0. 0.5 1. 1.5 2. ] [[0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] . Basic Operations . # Simple Arithmetic Operations array_a = np.array([1, 2, 3]) array_b = np.array([4, 5, 6]) print(&quot;Addition of two array : t&quot;, array_a + array_b) print(&quot;Subtraction of two array : t&quot;, array_a - array_b) print(&quot;Multiplication of two array : t&quot;, array_a * array_b) print(&quot;Division of two array : t&quot;, array_a / array_b) . . Addition of two array : [5 7 9] Subtraction of two array : [-3 -3 -3] Multiplication of two array : [ 4 10 18] Division of two array : [0.25 0.4 0.5 ] . # Or we could apply basic math functions [sin, cos] to arrays. sine_array = np.sin(array_a) cos_array = np.cos(array_a) print(sine_array, &#39; n&#39;, cos_array) . . [0.84147098 0.90929743 0.14112001] [ 0.54030231 -0.41614684 -0.9899925 ] . Indexing, Slicing and Iterating . Accessing element in ndArray is just better than in List. We could access one element by its Index: . element = array[0] . or in range, Slicing . element = array[0:5] . . Array Manipulation . We could manipulate shape of array in numpy. . Ordering . Sort or find the Max, Min value in the array. . . Basic Statistics . Numpy is originally designed for Data Science, so, it normally have most of the statictics calculations.We could find the basic statistics value Mean with np.mean(), Standard Deviation with np.std() and Variance with np.var() in the array. . Simple Comparison . The Strength of Numpy is its Broadcasting, which make calculation much, much faster than List. List have to iterate through each and every element to access them, while Numpy can iteration one time and get access to all elements. . Code Complexity . # Add 1: to list for i in range(len(list_obj)): for j in range(len(list_obj[0])): for k in range(len(list_obj[0][0])): list_obj[i][j][k] += 1 # Add 1: to Array np_array += 1 . Speed . We test a function, same input for both List and Numpy Array, but get different result time. See more detail in code. Every time you run, the value might be a little different, but: . In array, it only costs 4.61ms when in list it costs 186ms. That is so much faster in numpy. . Matplotlib . Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. The following plots are referenced from matplotlib&#39;s official website For this lecture, we will use matplotlib.pyplot which is a collection of functions that make matplotlib work like MATLAB . 1. Simple Plots . First, we need to know how the pyplot functions work. Let&#39;s start with some basic functions. . %matplotlib inline import matplotlib.pyplot as plt plt.plot([1, 2, 3, 4,4.5,5,5.5,6]) plt.xlabel(&#39;This is x label&#39;) plt.ylabel(&#39;This is y label&#39;) plt.show() . Here, we have mentioned plt.plot() plt.xlabel() and plt.ylabel(). You will that the list we put into the plt.plot() function is taken as x argument of that function. Let&#39;s look at more examples. . import numpy as np x = np.arange(10) plt.plot(x,x**2,linestyle=&#39;dashed&#39;,linewidth=2, markersize=12) plt.xlabel(&quot;number&quot;) plt.ylabel(&quot;number squared&quot;) . Text(0, 0.5, &#39;number squared&#39;) . Now,we have learnt that additional customizations can be added to the plots with use of some additional arguments. Also, we can make multiple plots on the same plane. . import numpy as np x = np.arange(10) plt.plot(x,x**2,x,3*x,&#39;r+&#39;,x,7*x,&#39;bo&#39;) . [&lt;matplotlib.lines.Line2D at 0x26bc35baa88&gt;, &lt;matplotlib.lines.Line2D at 0x26bc35bac48&gt;, &lt;matplotlib.lines.Line2D at 0x26bc35bae08&gt;] . Now that we have learnt how to manipulate plt.plot(), this should be enough for the assignments. If you want more information regarding this function, you can check their official documentation and also follow matplotlib&#39;s tutorial for this function. . 2. Using Subplots . plt.subplot()is a handy function to display multiple plots. Let&#39;s dive in and see how it works . x1 = np.linspace(0.0, 5.0) x2 = np.linspace(0.0, 2.0) y1 = np.cos(2 * np.pi * x1) * np.exp(-x1) y2 = np.cos(2 * np.pi * x2) plt.subplot(2, 1, 1) plt.plot(x1, y1, &#39;o-&#39;) plt.title(&#39;A tale of 2 subplots&#39;) plt.ylabel(&#39;Damped oscillation&#39;) plt.subplot(2, 1, 2) plt.plot(x2, y2, &#39;.-&#39;) plt.xlabel(&#39;time (s)&#39;) plt.ylabel(&#39;Undamped&#39;) plt.show() . This is the traditional method to create multiple plots. However, there is an alternative method which is more optimal for creating waveforms. . x1 = np.linspace(0.0, 5.0) x2 = np.linspace(0.0, 2.0) x3 = np.linspace(0.0, 5.0) y1 = np.cos(2 * np.pi * x1) * np.exp(-x1) y2 = np.cos(2 * np.pi * x2) y3 = np.sin(2 * np.pi * x3) * np.exp(-x1) fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20,10)) fig.suptitle(&#39;A tale of 3 subplots&#39;) ax1.plot(x1, y1, &#39;o-&#39;) ax1.set_ylabel(&#39;Damped oscillation&#39;) ax2.plot(x2, y2, &#39;.-&#39;) ax2.set_xlabel(&#39;time (s)&#39;) ax2.set_ylabel(&#39;Undamped&#39;) ax3.plot(x3, y3, &#39;o-&#39;) ax3.set_ylabel(&#39;Sine damped&#39;) plt.show() . Form the code above, we now know that subplot function has input and basic output arguments: . figure, axes = plt.subplot(rows,columns,figure_size) . For more details about this function, please follow documentation and reference tutorial from matplotlib. . 3. Scatter plots . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.scatter.html . 4. Histograms . https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.hist.html . OpenCV . OpenCV (Open Source Computer Vision Library: http://opencv.org) is an open-source library that includes several hundreds of computer vision algorithms. . https://docs.opencv.org/master/index.html . 1. Reading &amp; Writing Images . Basic Functions . cv2.imread(path,flag) . cv2.imshow(&#39;title&#39;,image) . cv2.waitKey(sec) . cv2.destroyAllWindows() . cv2.imwrite(&#39;filename&#39;,image) . source - https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html . 2. Drawing shapes . cv2.line(image, start_point, end_point, color, thickness) . cv2.cvtColor(src,method) . cv2.rectangle(image, start_point, end_point, color, thickness) . cv2.circle(image, center_coordinates, radius, color, thickness) . cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) . sources - . https://www.geeksforgeeks.org/ . https://docs.opencv.org/master/d6/d6e/group__imgproc__draw.html . 3. Face Detection with HaarCascade Detector . cv2.CascadeClassifier(filename) . cv2.CascadeClassifier.detectMultiScale( image,objects,scaleFactor,minNeighbors,flags,minSize,maxSize) . https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html . https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html . 4. Resizing images . cv2.resize(input,(size_x,size_y),fx,fy,interpolation) . https://docs.opencv.org/master/da/d6e/tutorial_py_geometric_transformations.html . 5. Splitting &amp; Merging images . b,g,r = cv2.split(color_image) . image = cv2.merge((r,g,b)) . https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_core/py_basic_ops/py_basic_ops.html . 6. Image translation &amp; rotation . cv2.warpAffine(image, M, output_size, flags, borderMode, borderValue) . cv2.getRotationMatrix2D(center, angle, scale) . https://docs.opencv.org/3.4/d4/d61/tutorial_warp_affine.html . https://www.programcreek.com/python/example/89459/cv2.getRotationMatrix2D . https://docs.opencv.org/3.4/da/d54/group__imgproc__transform.html .",
            "url": "https://ytu-cvlab.github.io/mce-51069/image_processing/overview/2020/12/16/week1-day3.html",
            "relUrl": "/image_processing/overview/2020/12/16/week1-day3.html",
            "date": " • Dec 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 1, Day 1 (Introduction to the course)",
            "content": "Anaconda and Jupyter Notebook . Anaconda is a Data Science Platform, which comes with Data Science related packages and libraries, such as numpy and matplotlib, in Python. The aforementioned reason for using Anaconda is just one of the many good reasons and there are certainly other benefits. If you are interested in it, Please visit their website to explore more. . In this course, we decide to get Anaconda installed for every student, and make the installation video guides for Anaconda available in this website. . Jupyter Notebook is an open source, web application that allow users to create and share documents that contain live codes, equations, visualizations and narrative text. Quote :Jupyter.org . Anaconda Installation on Windows . . Anaconda Installation on Mac . . How to use Jupyter Notebook . . Student ID and Attendance . Please fill out this form from this link to get your student ID. . We will record attendance in every session with google forms provided only in zoom chat. . Assignment . Please submit your week 1 assignments from this link. We will return your assignment scores after the deadline day (you can check on your submission form). Please note that we will return your final grade only if you submit all the assignments. .",
            "url": "https://ytu-cvlab.github.io/mce-51069/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "relUrl": "/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "date": " • Dec 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": ".",
          "url": "https://ytu-cvlab.github.io/mce-51069/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ytu-cvlab.github.io/mce-51069/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}