{
  
    
        "post0": {
            "title": "Week 1, Day 3 (Introduction to Image Processing in Python)",
            "content": "Numpy . Numpy is a strong third-party library emphasize on numerical calculation in python. In short, numpy has a ndArray data type, which can process numbers, a large numbers of numbers, more efficiently than List. . The codes below are reference from Numpy Official Doc . The Basics . Create Array . There are many ways to create numpy array. The simplest one : from List. . array = np.array(list) . Or we could create array with functions come with numpy. . array = np.arange(start, stop, step) . But, with np.arange, we could not control the number of element in that array. So: . array = np.linspace(start, stop, num) . Or, we could just create array from the fly just describe the shape of array that we want. . zeros = np.zeros(shape_in_tuple) ones = np.ones(shape_in_tuple) empty = np.empty(shape_in_tuple) . import numpy as np # Let&#39;s Create an array array = np.array([1, 2, 3, 4, 5]) # Print Out the Array print(array) array = np.arange(2, 20, 2) print(array) #Create with the count of array wanted array = np.linspace(0, 2, 5) print(array) # Initialize array for place holder array = np.zeros((5,5)) print(array) array = np.ones((5,5)) print(array) array = np.empty((5,5)) print(array) . . [1 2 3 4 5] [ 2 4 6 8 10 12 14 16 18] [0. 0.5 1. 1.5 2. ] [[0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.] [0. 0. 0. 0. 0.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] [[1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.] [1. 1. 1. 1. 1.]] . Basic Operations . # Simple Arithmetic Operations array_a = np.array([1, 2, 3]) array_b = np.array([4, 5, 6]) print(&quot;Addition of two array : t&quot;, array_a + array_b) print(&quot;Subtraction of two array : t&quot;, array_a - array_b) print(&quot;Multiplication of two array : t&quot;, array_a * array_b) print(&quot;Division of two array : t&quot;, array_a / array_b) . . Addition of two array : [5 7 9] Subtraction of two array : [-3 -3 -3] Multiplication of two array : [ 4 10 18] Division of two array : [0.25 0.4 0.5 ] . # Or we could apply basic math functions [sin, cos] to arrays. sine_array = np.sin(array_a) cos_array = np.cos(array_a) print(sine_array, &#39; n&#39;, cos_array) . . [0.84147098 0.90929743 0.14112001] [ 0.54030231 -0.41614684 -0.9899925 ] . Indexing, Slicing and Iterating . Accessing element in ndArray is just better than in List. We could access one element by its Index: . element = array[0] . or in range, Slicing . element = array[0:5] . . Array Manipulation . We could manipulate shape of array in numpy. . Ordering . Sort or find the Max, Min value in the array. . . Basic Statistics . Numpy is originally designed for Data Science, so, it normally have most of the statictics calculations.We could find the basic statistics value Mean with np.mean(), Standard Deviation with np.std() and Variance with np.var() in the array. . Simple Comparison . The Strength of Numpy is its Broadcasting, which make calculation much, much faster than List. List have to iterate through each and every element to access them, while Numpy can iteration one time and get access to all elements. . Code Complexity . # Add 1: to list for i in range(len(list_obj)): for j in range(len(list_obj[0])): for k in range(len(list_obj[0][0])): list_obj[i][j][k] += 1 # Add 1: to Array np_array += 1 . Speed . We test a function, same input for both List and Numpy Array, but get different result time. See more detail in code. Every time you run, the value might be a little different, but: . In array, it only costs 4.61ms when in list it costs 186ms. That is so much faster in numpy. . Matplotlib . Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. The following plots are referenced from matplotlib&#39;s official website For this lecture, we will use matplotlib.pyplot which is a collection of functions that make matplotlib work like MATLAB . 1. Simple Plots . First, we need to know how the pyplot functions work. Let&#39;s start with some basic functions. . %matplotlib inline import matplotlib.pyplot as plt plt.plot(x,x) . [&lt;matplotlib.lines.Line2D at 0x227f3bafb48&gt;] . plt.plot(np.arange(8),[0, 1, 2, 3,3.5,4,4.5,5]) plt.xlabel(&#39;This is x label&#39;) plt.ylabel(&#39;This is y label&#39;) plt.show() . x = np.linspace(0, 10, 100) fig = plt.figure() plt.plot(x, np.sin(x), &#39;-&#39;) plt.plot(x, np.cos(x), &#39;--&#39;); plt.title(&quot;Sine and Cosine waveforms&quot;) . Text(0.5, 1.0, &#39;Sine and Cosine waveforms&#39;) . Here, we have mentioned plt.plot() plt.xlabel(),plt.ylabel() and plt.title(). You will that the list we put into the plt.plot() function is taken as x argument of that function. Let&#39;s look at more examples. . import numpy as np x = np.arange(10) plt.plot(x,x**2,linestyle=&#39;dashed&#39;,linewidth=2, markersize=12) plt.xlabel(&quot;number&quot;) plt.ylabel(&quot;number squared&quot;) . Text(0, 0.5, &#39;number squared&#39;) . Now,we have learnt that additional customizations can be added to the plots with use of some additional arguments. Also, we can make multiple plots on the same plane. . import numpy as np x = np.arange(10) plt.plot(x,x**2,x,3*x,&#39;r+&#39;,x,7*x,&#39;bo&#39;) . [&lt;matplotlib.lines.Line2D at 0x227f3b4adc8&gt;, &lt;matplotlib.lines.Line2D at 0x227f3b56d88&gt;, &lt;matplotlib.lines.Line2D at 0x227f3b56f48&gt;] . x = np.linspace(0, 10, 100) plt.plot(x, x + 0, &#39;-g&#39;) # solid green plt.plot(x, x + 1, &#39;--c&#39;) # dashed cyan plt.plot(x, x + 2, &#39;-.k&#39;) # dashdot black plt.plot(x, x + 3, &#39;:r&#39;); # dotted red . Now that we have learnt how to manipulate plt.plot(), this should be enough for the assignments. If you want more information regarding this function, you can check their official documentation and also follow matplotlib&#39;s tutorial for this function. . 2. Using Subplots . plt.subplot()is a handy function to display multiple plots. Let&#39;s dive in and see how it works . x1 = np.linspace(0.0, 5.0) x2 = np.linspace(0.0, 2.0) y1 = np.cos(2 * np.pi * x1) * np.exp(-x1) y2 = np.cos(2 * np.pi * x2) plt.subplot(2, 1, 1) plt.plot(x1, y1, &#39;o-&#39;) plt.title(&#39;A tale of 2 subplots&#39;) plt.ylabel(&#39;Damped oscillation&#39;) plt.subplot(2, 1, 2) plt.plot(x2, y2, &#39;.-&#39;) plt.xlabel(&#39;time (s)&#39;) plt.ylabel(&#39;Undamped&#39;) plt.show() . This is the traditional method to create multiple plots. However, there is an alternative method which is more optimal for creating waveforms. . x1 = np.linspace(0.0, 5.0) x2 = np.linspace(0.0, 2.0) x3 = np.linspace(0.0, 5.0) y1 = np.cos(2 * np.pi * x1) * np.exp(-x1) y2 = np.cos(2 * np.pi * x2) y3 = np.sin(2 * np.pi * x3) * np.exp(-x1) fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20,10)) fig.suptitle(&#39;A tale of 3 subplots&#39;) ax1.plot(x1, y1, &#39;o-&#39;) ax1.set_ylabel(&#39;Damped oscillation&#39;) ax2.plot(x2, y2, &#39;.-&#39;) ax2.set_xlabel(&#39;time (s)&#39;) ax2.set_ylabel(&#39;Undamped&#39;) ax3.plot(x3, y3, &#39;o-&#39;) ax3.set_ylabel(&#39;Sine damped&#39;) plt.show() . Form the code above, we now know that subplot function has input and basic output arguments: . figure, axes = plt.subplot(rows,columns,figure_size) . For more details about this function, please follow documentation and reference tutorial from matplotlib. . 3. Scatter plots . A scatter plot uses dots to represent values for two different numeric variables. The position of each dot on the horizontal and vertical axis indicates values for an individual data point. Scatter plots are used to observe relationships between variables. Let&#39;s start with a simple scatter plot. . x = np.linspace(0, 10, 30) y = np.sin(x) plt.plot(x, y, &#39;o&#39;, color=&#39;black&#39;); . Here, we simply used one of the plotstyles in plt.plot() to create a scatter plot. However, there is a better function for this purpose: plt.scatter() . N = 500 x = np.random.rand(N) y = np.random.rand(N) colors = (0,0,0) area = np.pi*3 # Plot plt.scatter(x, y, s=area, c=&quot;green&quot;, alpha=0.5) plt.title(&#39;Scatter plot&#39;) plt.xlabel(&#39;x&#39;) plt.ylabel(&#39;y&#39;) plt.show() . This should be enough for our course. If you want to learn more about creating different types of scatter plots, please follow this link . 4. Histograms . The purpose of a Histogram is to graphically summarize the distribution of a single feature within a dataset. . x = np.random.randn(1000) plt.hist(x, color = &quot;red&quot;, edgecolor = &quot;black&quot;); plt.title(&quot;Histogram&quot;) . Text(0.5, 1.0, &#39;Histogram&#39;) . plt.hist(x, bins=50, color=&#39;steelblue&#39;,edgecolor=&#39;black&#39;); . Histograms are very useful when we make comparisons within datasets. For this example, we have gathered some data from galtron height dataset to compare the heights of 30 men and 30 women. . #Heights of 30 random women in inches w = [69.2,69,69,65.5,65.5,68,67,64.5,63,66.5,62.5,62.5,69.5,70.5,64,70.5,68,66,66,65.5,68,67,67,66,63.5,63,65,66.7,68.7,62] #Heights of 30 random men in inches m = [73.2,73.5,72.5,71,70.5,68.5,72,69,68,76.5,74,73,73,74,70,68,67,71,70.5,72,70.5,70.2,70.2,69.2,74,73,71.5,62.5,73.2,73] plt.hist(w, bins=10,color=&#39;red&#39;,edgecolor=&#39;black&#39;, alpha =0.5) plt.hist(m, bins=10,color=&#39;blue&#39;,edgecolor=&#39;black&#39;, alpha =0.5) plt.title(&quot;Height distributions of Men and Women&quot;) . Text(0.5, 1.0, &#39;Height distributions of Men and Women&#39;) . From this Histogram, we can definitely reach a conclusion that men are usually taller than women. . references - matplotlib, python data science handbook . OpenCV . OpenCV (Open Source Computer Vision Library: http://opencv.org) is an open-source library that includes several hundreds of computer vision algorithms. . https://docs.opencv.org/master/index.html . 1. Reading &amp; Writing Images . Basic Functions . cv2.imread(path,flag) . cv2.imshow(&#39;title&#39;,image) . cv2.waitKey(sec) . cv2.destroyAllWindows() . cv2.imwrite(&#39;filename&#39;,image) . source - https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html . 2. Drawing shapes . cv2.line(image, start_point, end_point, color, thickness) . cv2.cvtColor(src,method) . cv2.rectangle(image, start_point, end_point, color, thickness) . cv2.circle(image, center_coordinates, radius, color, thickness) . cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) . sources - . https://www.geeksforgeeks.org/ . https://docs.opencv.org/master/d6/d6e/group__imgproc__draw.html . 3. Face Detection with HaarCascade Detector . cv2.CascadeClassifier(filename) . cv2.CascadeClassifier.detectMultiScale( image,objects,scaleFactor,minNeighbors,flags,minSize,maxSize) . https://docs.opencv.org/3.4/d1/de5/classcv_1_1CascadeClassifier.html . https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html . 4. Resizing images . cv2.resize(input,(size_x,size_y),fx,fy,interpolation) . https://docs.opencv.org/master/da/d6e/tutorial_py_geometric_transformations.html . 5. Splitting &amp; Merging images . b,g,r = cv2.split(color_image) . image = cv2.merge((r,g,b)) . https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_core/py_basic_ops/py_basic_ops.html . 6. Image translation &amp; rotation . cv2.warpAffine(image, M, output_size, flags, borderMode, borderValue) . cv2.getRotationMatrix2D(center, angle, scale) . https://docs.opencv.org/3.4/d4/d61/tutorial_warp_affine.html . https://www.programcreek.com/python/example/89459/cv2.getRotationMatrix2D . https://docs.opencv.org/3.4/da/d54/group__imgproc__transform.html .",
            "url": "https://ytu-cvlab.github.io/mce-51069/image_processing/overview/2020/12/16/week1-day3.html",
            "relUrl": "/image_processing/overview/2020/12/16/week1-day3.html",
            "date": " • Dec 16, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 1, Day 2 (Python for Data Science)",
            "content": "Notebooks and Assignments . Please download all the lectures and assignment notebooks of week 1 (Day 2) here. We have also posted a guide video on downloading &amp; accessing materials on our youtube channel. . Learning Tips . We Strongly recommand learning with playing. We provide notebooks for students to get started. If you get trouble with learning, please feel free to reach out to us on facebook and email. . Data Types . In python, there are built-in data-types, some of which are described below: . Int (1 ,100, 99) | Float (1.0, 3.14, 2.718) | String (&quot;Myanmar&quot;, &quot;Burma&quot;) | Boolean (True, False) | Complex (1+0j) | null (None) | To describe the various properties in the real world, we must use different data types. . e.g., if we want to describe a person&#39;s name, we could use String. Int for his/her age, Float for his/her height in (cm) and Boolean if he/she is graduated or not. . The main take away from this lecture notebook is to know the differences between data types and their usage. . Four Most Used Data Types . We can store data of different types in variable names. See the example below: . # Int int1 = 5 int2 = 3 # Float float1 = 1. float2 = 3.14 # String string1 = &quot;Hello&quot; string2 = &#39;World&#39; # Boolean bool1 = True bool2 = False . print function is used to print the values of the variable to the output screen. . print(int1) . 5 . We can check the datatype of the variable by using type function: . type(int1) . int . Arithmetic Operations on Number Data Types . We could do arithmetic operations on Number Data Types (Int and Float) as shown below: . int1 = 5 int2 = 3 # We can add, subtract two elements of &#39;Int&#39; dtype. print(int1 + int2) # Addition print(int1 - int2) # Subtraction print(int1 * int2) # Multiplication print(int1 / int2) # Division print(int1 % int2) # Remainder print(int1**int2) # Power print(&quot;&quot;) float1 = 1. float2 = 3.14 # We can also, do operations on `Float` dtype. print(float1 + float2) print(float1 - float2) print(float1 * float2) print(float1 / float2) print(float1 % float2) print(float1**float2) . . 8 2 15 1.6666666666666667 2 125 4.140000000000001 -2.14 3.14 0.3184713375796178 1.0 1.0 . String Operations . We can use &#39;+&#39; operator to concatenate two strings. . # Simple concatenation of two strings concatenate_string = string1 + string2 print(concatenate_string) . HelloWorld . We can also use f-Strings method for better formating of string. . In f-Strings method, we can insert variables in the string format. . # f-Strings method. f_string = f&quot;Hello World, welcome to the wonderland&quot; print(f_string) string1 = &quot;Hello&quot; string2 = &quot;World&quot; f_string_var = f&quot;{string1} {string2}, This is testing the f-Strings&quot; print(f_string_var) . . Hello World, welcome to the wonderland Hello World, This is testing the f-Strings . . Important: One thing to be aware of in Python, we can not add two variables of different data types. In the example described below, we try to add Int and String data types, which is not possible. . var_a = &quot;Hello&quot; var_b = 5 print(var_a + var_b) . . TypeError Traceback (most recent call last) &lt;ipython-input-22-7f4a263b8c2b&gt; in &lt;module&gt; 2 var_b = 5 3 -&gt; 4 print(var_a + var_b) TypeError: can only concatenate str (not &#34;int&#34;) to str . # Or this print(int(var_a) + var_b) . . ValueError Traceback (most recent call last) &lt;ipython-input-23-c93ae652aa67&gt; in &lt;module&gt; 1 # Or this -&gt; 2 print(int(var_a) + var_b) ValueError: invalid literal for int() with base 10: &#39;Hello&#39; . When converting String to Int, if the value in that String is Int, then we can do addition. . # we could, for example var_a = &quot;5&quot; var_b = 5 print(int(var_a) + var_b) . . 10 . Boolean Operation . Boolean includes only two values, True and False. . Note: The capital letter and small letter must be correctly spelled.eg. true will not work. Boolean variables are often used in conditional operations, such as if and while. . bool1 = True bool2 = False # Check if a varible is True if bool1: print(&quot;bool1 variable is True&quot;) # This print statement is not working # because bool2 is not True if bool2: print(&quot;bool2 variable is True&quot;) . . bool1 variable is True . # Check if a variable is False (not True) if not bool1: print(&quot;bool1 variable is False&quot;) if not bool2: print(&quot;bool2 variable is False&quot;) . . bool2 variable is False . # We could use AND, OR operation too. if bool1 and bool2: print(&quot;Both Variables are True&quot;) if bool1 or bool2: print(&quot;At least one variable is True&quot;) . . At least one variable is True . Further Resources for Data Types . If you want to learn more about data types and their operations in more details, please visit to official Python documentation. You can also learn more about it in this blog post about Basic Data Types in Python. . Data Structures . Python Data Structures are used to store and collect data. There are four basic built-in data structures in Python. . # Simple Creation of each four types of structures list_obj = [1, 2, 3, 4, 1, 2, 3, 4] set_obj = {1, 2, 3, 4, 1, 2, 3, 4} tuple_obj = (1, 2, 3, 4, 1, 2, 3, 4) dict_obj = {&#39;a&#39;:1, &#39;b&#39;:2, &#39;c&#39;:3, &#39;d&#39;:4, &#39;e&#39;:1, &#39;f&#39;:2} . print(type(list_obj), list_obj) print(type(set_obj), set_obj) print(type(tuple_obj), tuple_obj) print(type(dict_obj), dict_obj) . . &lt;class &#39;list&#39;&gt; [1, 2, 3, 4, 1, 2, 3, 4] &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} &lt;class &#39;tuple&#39;&gt; (1, 2, 3, 4, 1, 2, 3, 4) &lt;class &#39;dict&#39;&gt; {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 1, &#39;f&#39;: 2} . List . The Most commonly used data structure in Python, List, has the following properties : . Element are accessable with order | Mutable (variable values can be changed) | list_height = [170, 172, 174, 160, 178] print(&quot;Heights of student in class...&quot;) print(list_height) . Heights of student in class... [170, 172, 174, 160, 178] . Access with Index . . Note: If we access element that is out of range, it will rasie IndexError as follows . print(&quot;Student A height : &quot;, list_height[0]) print(&quot;Student B height : &quot;, list_height[1]) print(&quot;Student A height : &quot;, list_height[2]) print(&quot;Student B height : &quot;, list_height[3]) print(&quot;Student A height : &quot;, list_height[4]) print(&quot;Student B height : &quot;, list_height[5]) . . Student A height : 170 Student B height : 172 Student A height : 174 Student B height : 160 Student A height : 178 . IndexError Traceback (most recent call last) &lt;ipython-input-4-d5a3a372c0b9&gt; in &lt;module&gt; 4 print(&#34;Student B height : &#34;, list_height[3]) 5 print(&#34;Student A height : &#34;, list_height[4]) -&gt; 6 print(&#34;Student B height : &#34;, list_height[5]) IndexError: list index out of range . IndexError: list index out of range. Because there are only 5 elements in list, list_height[5] request for 6th element, which is out of range. . Access with Iteration(For Loop) . num_student = 0 for height in list_height: num_student += 1 print(height, end = &#39;,&#39;) print(f&quot; nThere are {num_student} students in the class&quot;) . . 170,172,174,160,178, There are 5 students in the class . &#39;&#39;&#39; Simple Program: Convert height information in &quot;cm&quot; to &quot;feet&quot; &#39;&#39;&#39; # Convert cm to feet for height_cm in list_height: height_feet = height_cm * 0.0328 # cm to feet equation print(f&quot;Studnet height : {height_cm} cm {height_feet:.2f} feet&quot;) . . Studnet height : 170 cm 5.58 feet Studnet height : 172 cm 5.64 feet Studnet height : 174 cm 5.71 feet Studnet height : 160 cm 5.25 feet Studnet height : 178 cm 5.84 feet . List with different Datatype . We can store, not just one datatype, but variables with different data types in a list. . student_A = [&quot;Aung Aung&quot;, &quot;McE&quot;, 3, 6] student_B = [&quot;Soe Pyae&quot;, &quot;Civil&quot;, 3, 6] print(&quot;Student A Info : &quot;, student_A) print(&quot;Student B Info : &quot;, student_B) . . Student A Info : [&#39;Aung Aung&#39;, &#39;McE&#39;, 3, 6] Student B Info : [&#39;Soe Pyae&#39;, &#39;Civil&#39;, 3, 6] . # But Be Aware, We do not know which element contain what information.. print(student_A[2] + student_A[3]) print(student_A[0] + student_A[1]) print(student_A[1] + student_A[2]) . . 9 Aung AungMcE . TypeError Traceback (most recent call last) &lt;ipython-input-5-b71be46f223e&gt; in &lt;module&gt; 2 print(student_A[2] + student_A[3]) 3 print(student_A[0] + student_A[1]) -&gt; 4 print(student_A[1] + student_A[2]) TypeError: can only concatenate str (not &#34;int&#34;) to str . TypeError :can only concatenate str to str | int to int This often happen in List when we try to store different data type into one list. It is hard to get exact index for each element. For that, in python, we use Dictionary to store key-value paired information. . Dictionary . When we walk into a library to find books, we search the book by its title, author or published year. Python use the same idea to store value for the varible, by creating the key for that value. Thus Dictionary in python is key-value paired data structure. . # List student_A_list = [&quot;Aung_Paing&quot;, &quot;McE&quot;, 3, 6] student_B_list = [&quot;Soe_Pyae&quot;, &quot;Civil&quot;, 3, 6] # Dictionary student_A_dict = {&quot;Name&quot; : &quot;Aung_Paing&quot;, &quot;Major&quot; : &quot;McE&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} student_B_dict = {&quot;Name&quot; : &quot;Soe_Pyae&quot;, &quot;Major&quot; : &quot;Civil&quot;, &quot;Batch&quot; : 3, &quot;Year&quot; : 6} print(student_A_list) print(student_A_dict) . . [&#39;Aung_Paing&#39;, &#39;McE&#39;, 3, 6] {&#39;Name&#39;: &#39;Aung_Paing&#39;, &#39;Major&#39;: &#39;McE&#39;, &#39;Batch&#39;: 3, &#39;Year&#39;: 6} . # If we want to get &quot;Name&quot; info for student_A name_student_A = student_A[0] print(name_student_A) print() # But in dict, we just need to specified it. We do not need to remember the index of that info. print(&quot;Name : &quot;, student_A_dict[&quot;Name&quot;]) print(&quot;Major : &quot;, student_A_dict[&quot;Major&quot;]) print(&quot;Batch : &quot;, student_A_dict[&quot;Batch&quot;]) print(&quot;Year : &quot;, student_A_dict[&quot;Year&quot;]) . . Aung_Paing Name : Aung_Paing Major : McE Batch : 3 Year : 6 . Tuple . Sometimes, we need immutable data. For example, Coordinate of a location, your Birthday, your significant other&#39;s Phone Number or may be even your gene code. The data that we want to access but must be changed are stored with Tuple. . home_coordinate = (123, 456) birthday = (11, 1, 1998) print(type(birthday)) print(birthday) . . &lt;class &#39;tuple&#39;&gt; (11, 1, 1998) . # Let&#39;s try to access the month with index... month = birthday[1] print(month) # Let&#39;s try to change the day.... birthday[1] = 10 . . 1 . TypeError Traceback (most recent call last) &lt;ipython-input-11-c728f5c5b1e0&gt; in &lt;module&gt; 4 5 # Let&#39;s try to change the day.... -&gt; 6 birthday[1] = 10 TypeError: &#39;tuple&#39; object does not support item assignment . Thus, we can see the data in tuples cannot be changed . Set . Set as the name suggest, is a set of collection. Sets ignore the order and the number of elements in a collection and only store the representatives in that collection. . set_obj = {1, 2, 3, 1, 2, 3, 4} print(type(set_obj)) print(set_obj) . . &lt;class &#39;set&#39;&gt; {1, 2, 3, 4} . # We cannot access the elements in the set set_obj[0] . . TypeError Traceback (most recent call last) &lt;ipython-input-25-c6b65031723d&gt; in &lt;module&gt; 1 # We could not access the element in that set. -&gt; 2 set_obj[0] TypeError: &#39;set&#39; object is not subscriptable . Tips . Error When you encounter an Error in the code, try the following steps: . Stay calm &amp; Read the error message carefully | Copy and paste the error message in google search or stackoverflow. | Ask for help in forums if necessary. | There are more than 8 million python users in the world and it is very likely that someone has encounterd the same problem as you did. So, don&#39;t hesitate to search for help. . We can check the specification of the variable by: . set_obj? . Type: set String form: {1, 2, 3, 4} Length: 4 Docstring: set() -&gt; new empty set object set(iterable) -&gt; new set object Build an unordered collection of unique elements. . Further Resources for Data Structure . If you would like to know more about Data Structure in Python. Please visit official Python cocumentation. You can also learn more about it in this blog post about Common Python Data Structure . Conditionals &amp; Loops in Python . Conditionals . if Statements in Python allow us to tell the computer to perform alternative actions based on a certain set of results. . In other words, we are telling the computer : &quot;Hey if this case happens, perform some action&quot; . We can then expand the idea further with elif and else statements, which allows us to tell the computer: &quot;Hey if this case happens, perform some action. Else, if another case happens, perform some other action. Else, if none of the above cases happened, perform this action&quot; . Let&#39;s go ahead and look at the syntax format for if-else cases to get a better idea of this: . # Simple if-else case rain = False if not rain: print(&quot;The weather is fine today, I am going out.&quot;) else: print(&quot;It is raining, I cannot go out...&quot;) . . The weather is fine today, I am going out. . # Or this way: if rain==True: print(&quot;It is raining, I cannot go out...&quot;) else: print(&quot;Today weather is fine, I am going out.&quot;) . . Today weather is fine, I am going out. . # sometime, in the program, we have to deal with other conditions rain = False weekday = True if not rain and weekday: print(&quot;I am going to School Today&quot;) elif not rain and not weekday: print(&quot;I am going out to play&quot;) else: # Rain and weekday print(&quot;Even though it is raining, I still have to go to school ...&quot;) . . I am going to School Today . Also, we could check the String and Int variables: . Note: here, when checking if Condition == True, we use == instead of = . # Check String operation = &quot;add&quot; if operation == &quot;add&quot;: print(&quot;Add Operation&quot;) elif operation == &quot;sub&quot;: print(&quot;Sub Operation&quot;) elif operation == &quot;mul&quot;: print(&quot;Multiplication Operation&quot;) elif operation == &quot;div&quot;: print(&quot;Division Operation&quot;) . . Add Operation . # Check Int int_obj = 10 # int_obj = -1 # Comment out to test # int_obj = 0 # int_obj = None if int_obj: print(&quot;There exists value for that int_obj&quot;) else: print(&quot;sorry, the input is None or Zero&quot;) . . There exists value for that int_obj . Loops . There are two main types of loops in python. . for | while | Generally, For iterates for the given range, While checks the condition and continue iteration until condition is False. . for range(): . while condition: . For . A for loop acts as an iterator in Python; it goes through items that are in a sequence or any other iterable item. Objects, that we&#39;ve learned and we can iterate over, include strings, lists, tuples, and even built-in iterables for dictionaries, such as keys or values. . Here&#39;s the general format for a for loop in Python: . for item in object: statements to do things . # Loop for 10 times for i in range(10): print(i, end=&quot; &quot;) print() . . 0 1 2 3 4 5 6 7 8 9 . # Let&#39;s access element from list list_obj = [1, 2, 3, 4, 5, 6, 7, 8, 9] for obj in list_obj: print(obj, end=&quot; &quot;) . . 1 2 3 4 5 6 7 8 9 . Tuples have a special quality when it comes to for loops. If you are iterating through a sequence that contains tuples, the item can actually be the tuple itself, this is an example of tuple unpacking. During the for loop we will be unpacking the tuple inside of a sequence and we can access the individual items inside that tuple. . list1 = [(0,1),(2,3),(4,5)] for tup in list1: print(tup) . . (0, 1) (2, 3) (4, 5) . # Now with unpacking! for (t1,t2) in list1: print(t1, end=&quot; &quot;) . . 0 2 4 . In the above case, the first element of each tuple is printed out. . # Now with unpacking! for (t1,t2) in list1: print(t2, end=&quot; &quot;) . . 1 3 5 . Here, the second element of each tuple gets printed out. . With tuples in a sequence we can access the items inside of them through unpacking! The reason this is important is because many objects will deliver their iterables through tuples. . Nested For Loop . Nested For, means for loop inside a for loop . nested_list = [[1, 2, 3, 4], [5, 6, 7, 8]] # To access nested list, we could use nested for loop for row in nested_list: for col in row: print(col, end=&quot; &quot;) . . 1 2 3 4 5 6 7 8 . While . The while statement in Python is one of most general ways to perform iteration. A while statement will repeatedly execute a single statement or group of statements as long as the condition is true. The reason it is called a &#39;loop&#39; is because the code statements are looped through over and over again until the condition is no longer met. . The general format of a while loop is: . while condition: code statements else: final code statements . Let’s look at a few simple while loops in action. . # While loop and loop for 10 times. i = 0 while i&lt;10: print(i, end=&quot; &quot;) i+=1 . . 0 1 2 3 4 5 6 7 8 9 . x = 0 while x &lt; 5: print(&#39;x is currently:&#39;,x) print(&#39;x is still less than 5, keep adding 1 to x&#39;) x += 1 . . x is currently: 0 x is still less than 5, keep adding 1 to x x is currently: 1 x is still less than 5, keep adding 1 to x x is currently: 2 x is still less than 5, keep adding 1 to x x is currently: 3 x is still less than 5, keep adding 1 to x x is currently: 4 x is still less than 5, keep adding 1 to x . Notice how many times the print statements occurred and how the while loop kept going until the True condition was met, which occurred once x==5. It&#39;s important to note that once this occurred the code stopped. Let&#39;s see how we could add an else statement: . x = 0 while x &lt; 5: print(&#39;x is currently: &#39;,x) print(&#39;x is still less than 5, keep adding 1 to x&#39;) x += 1 else: print(&#39;All Done!&#39;) . . x is currently: 0 x is still less than 5, keep adding 1 to x x is currently: 1 x is still less than 5, keep adding 1 to x x is currently: 2 x is still less than 5, keep adding 1 to x x is currently: 3 x is still less than 5, keep adding 1 to x x is currently: 4 x is still less than 5, keep adding 1 to x All Done! . When the condition isn&#39;t true anymore, that is, x is now 5, and so the else statement All Done! is printed out instead. . Further Resources for Conditionals and Loops . If you want to learn more about conditional statements and loops in more details, please visit to official Python documentation. You can also learn more about conditional statements, for loops and while loops in these posts. . Functions . Functions are great arsenal in python. . You could think of functions as a factory, process (do function) the raw inputs (Arguments) to desired products (output). There are two types of functions in Python. . Built-in Functions | User-Defined Functions | Built-in Functions . We&#39;ve already seen a few example of built-in functions when learning about Data Types in Python. Built-in Functions, come along with python and could be very useful when you need them. . Following are some examples of built-in functions. . int_obj = -5 print(int_obj) # Find the absolute value abs_int = abs(int_obj) print(abs_int) # Convert Int to String int2str = str(int_obj) print(int2str, type(int2str)) # Check the datatype print(isinstance(int_obj, int)) . . -5 5 -5 &lt;class &#39;str&#39;&gt; True . We can also use built-in functions to construct data-structures. . set_obj = set((1, 2, 3, 1, 2, 3)) print(set_obj) list_obj = list((1, 2, 3, 1, 2, 3)) print(list_obj) tuple_obj = tuple((1, 2, 3, 1, 2, 3)) print(tuple_obj) dict_obj = dict([(1,&quot;a&quot;), (2, &quot;b&quot;)]) print(dict_obj) . . {1, 2, 3} [1, 2, 3, 1, 2, 3] (1, 2, 3, 1, 2, 3) {1: &#39;a&#39;, 2: &#39;b&#39;} . . User-Defined Functions . This section will consist of explaining what a function is in Python and how to create one. Functions will be one of our main building blocks when we construct larger and larger amounts of code to solve problems. . . Typical function in python consists of the following parts: . Input (Arguments in functions) | Process (What this function do) | Output (What this function return) | In short, IPO for constructing a function. . Functions will be one of most basic levels of reusing code in Python, and it will also allow us to start thinking of program design (we will dive much deeper into the ideas of design when we learn about Object Oriented Programming). . def Statements . Let&#39;s see how to build out a function&#39;s syntax in Python. It has the following form: . def function_name(arg1,arg2): &#39;&#39;&#39; This is where the function&#39;s Document String (docstring) goes &#39;&#39;&#39; # Do stuff here # Return desired result . We begin with def then a space, followed by the name of the function. Try to keep names relevant though they can be variable, for example len() is a good name for a length() function. Also be careful with names, you wouldn&#39;t want to call a function the same name as a built-in functions(such as len). . Next comes a pair of parentheses with a number of arguments separated by a comma. These arguments are the inputs for your function. You&#39;ll be able to use these inputs in your function and reference them. After this you put a colon. . Now here is the important step, you must indent to begin the code inside your function correctly. Python makes use of whitespace to organize code. Lots of other programing languages do not do this, so keep that in mind. . Let&#39;s see the example of creating basic printing function. . # Define a function # No argument def print_hello(): print(&quot;Hello World&quot;) print_hello() # Call the funtion . . Hello World . Let&#39;s see some functions with input arguments. . # Argument with user name def print_hello(name): &quot;&quot;&quot; Print The User Name Args: name(String) -&gt; User name Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome.&quot;) print_hello(&quot;Aung Aung&quot;) # Call the funtion . . Hello Aung Aung! Welcome. . # Arguments with different datatypes def print_hello(name, age): &quot;&quot;&quot; Print The User Name Args: name (String) -&gt; User name age (Int) -&gt; User Age Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome. You are now {age} years old.&quot;) print_hello(&quot;Aung Aung&quot;, 22) # Call the funtion . . Hello Aung Aung! Welcome. You are now 22 years old. . Functions arguments can also have default values. See the example below. . # Argument having default value def print_hello(name, age = 18): &quot;&quot;&quot; Print The User Name Args: name (String) -&gt; User name age (Int) -&gt; User Age Return: None &quot;&quot;&quot; print(f&quot;Hello {name}! Welcome. You are now {age} years old.&quot;) # Because the &#39;age&#39; argument has default value, we don&#39;t need to provide value. print_hello(&quot;Aung Aung&quot;) print_hello(&quot;Aung Aung&quot;, 22) . . Hello Aung Aung! Welcome. You are now 18 years old. Hello Aung Aung! Welcome. You are now 22 years old. . Using return . Let&#39;s see some examples that use a return statement. return allows a function to return a result that can then be stored as a variable, or used in whatever manner a user wants. . def add_num(num1,num2,num3): return num1 + num2 + num3 . # Calling the function add_num(1,2,3) . . 6 . # Can also save as variable due to return result = add_num(1,2,3) print(result) . . 6 . # Let&#39;s try to make a power function def power(base_num, pow_num): &quot;&quot;&quot; Calculate the power of base_num Args: base_num(Int) -&gt; Base number for calculation pow_num(Int) -&gt; Power number for calculation Return: power_num(Int) -&gt; Power number for calculation &quot;&quot;&quot; return base_num ** pow_num # We can directly print out the value print(power(2, 3)) # Or we can assign the output value to a variable and print. output = power(3, 2) print(output) . . 8 9 . In the above function: We get the process of Calculate the Power of base_num, Input of base_num and pow_num. Output for power_num. . Further Resources for Functions . If you want to learn more about built-in functions in more details, please visit to official Python documentation. You can also check this blog post about Functions. . Classes . Classes are the main building blocks in Object Oriented Programming (OOP). OOP is one of the hardest parts for beginners when they are first starting to learn Python. But we will get you through OOP in the following section. So, let&#39;s start. . . Intro to OOP . Let&#39;s start the lesson by remembering about the Basic Python Objects. For example: . lst = [0, 1, 2, 3] . When we print out the type of that lst . print(type(lst)) . &lt;class &#39;list&#39;&gt; . This is the built-in Class of list. And we can call methods on that list with . lst.append(2) lst . [0, 1, 2, 3, 2] . Here, append is the method that the &lt;class &#39;list&#39;&gt; has. . Objects . Everything in Python is an object. We can use type() to check the type of object: . print(type(1)) print(type([])) print(type(())) print(type({})) . . &lt;class &#39;int&#39;&gt; &lt;class &#39;list&#39;&gt; &lt;class &#39;tuple&#39;&gt; &lt;class &#39;dict&#39;&gt; . So we know all these things are objects, so how can we create our own Object types? That is where the class keyword comes in. . Class and Attributes . class . User defined objects are created using the class keyword. The class is a blueprint that defines the nature of a future object. From classes we can construct instances. An instance is a specific object created from a particular class. For example: . t = (1, 2, 3) . We created the object t which was an instance of a tuple object. . Now, Let&#39;s try a step up and create our own class. . # Construct a new object type called Student class Student: pass # Instance of the class Student x = Student() print(type(x)) . &lt;class &#39;__main__.Student&#39;&gt; . Most of the programmers give classes a name that starts with a capital letter by convention. Note how x is now the instance of a Student class. In other words, we instantiate the Student class. . At the inside of the class we currently just have pass keyword. But we can define class attributes and methods. . An attribute is a characteristic of an object.A method is an operation we can perform with the object. . For example, we can create a class called Dog. An attribute of a dog may be its breed or its name, while a method of a dog may be defined by a .bark() method which returns a sound. . Attributes . The syntax for creating an attribute is: . self.attribute = something . There is a special method called: . __init__() . This method is used to initialize the attributes of an object. For example: . class Student: def __init__(self, name): self.name = name a = Student(name = &#39;Aung Paing&#39;) b = Student(name = &#39;Soe Pyae Phyo&#39;) . Let&#39;s break down what we have above. The special method . __init__() . is called automatically right after the object has been created. . def __init__(self, name): . Each attribute in a class definition begins with a reference to the instance object. It is by convention named self. The name is the argument. The value is passed during the class instantiation. . self.name = name . . Note: self.name can be given any desire variable names; no need to be name. For example, self.student_name = name Now we have created two instances of the Student class. With two different names, we can then use these attributes like this: . a.name . &#39;Aung Aung&#39; . b.name . &#39;Soe Soe&#39; . Note how we don&#39;t have any parentheses after name; this is because it is an attribute and doesn&#39;t take any arguments. . Lets add more attributes to our Student class. . class Student: def __init__(self, name, major, batch, age, passedlastterm): self.name = name self.major = major self.batch = batch self.age = age self.passedlastterm = passedlastterm student_a = Student(&quot;Myo Myo&quot;, &quot;EC&quot;, 3, 24, True) student_b = Student(&quot;Su Su&quot;, &quot;Text&quot;, 2, 18, False) print(&quot; nStudent a Data :&quot;) print(student_a.name) print(student_a.major) print(student_a.batch) print(student_a.age) print(student_a.passedlastterm) . . Student a Data : Myo Myo EC 3 24 True . Methods . Methods are functions defined inside the body of a class. They are used to perform operations with the attributes of our objects. Methods are a key concept of the OOP pattern. They are essential to dividing responsibilities in programming, especially in large applications. . Let&#39;s go through an example of creating a Square class: . class Square: # Square gets instantiated def __init__(self, length = 4): self.length = length self.area = length * length # Resetting length def setLength(self, new_length): self.length = new_length self.area = new_length * new_length s = Square() print(&#39;Length is &#39;, s.length) print(&#39;Area is &#39;, s.area) s.setLength(6) print(&#39;Now length is &#39;, s.length) print(&#39;Now area is &#39;, s.area) . . Length is 4 Area is 16 Now length is 6 Now area is 36 . In this Square class, we have defined two attributes: self.length and self.area. . def setLength(self, new_length): . is called method of the class, which we use to interact with the user and manipulate the class attributes. Notice how we used self. notation to reference attributes of the class within the method calls. . Now, Let&#39;s add some methods to Student class. . class Student: def __init__(self, name, major, batch, age, passedlastterm): self.name = name self.major = major self.batch = batch self.age = age self.passedlastterm = passedlastterm def print_result(self): if self.passedlastterm: print(&quot;Congrats, you can move to next term.&quot;) else: print(&quot;Sorry, you need to retake the exam.&quot;) student_a = Student(&quot;Myo Myo&quot;, &quot;EC&quot;, 3, 24, True) print(&quot;Student a Result&quot;) student_a.print_result() . . Student a Result Congrats, you can move to next term. . Inheritance . Inheritance is a way to form new classes using classes that have already been defined. The newly formed classes are called derived classes, the classes that we derive from are called base classes. Important benefits of inheritance are code reuse and reduction of complexity of a program. The derived classes override or extend the functionality of base classes. . Let&#39;s use our Student class again. . # Inheritance and not change anything. class ExchangeStudent(Student): pass . In this example, we have two classes: Student and ExchangeStudent. The Student is the base class, the ExchangeStudent is the derived class. . The derived class inherits the functionality of the base class. This is shown in the example below. . # ExchangeStudent should have all properties and methods Student has. student_ex = ExchangeStudent(&quot;Htet Htet&quot;, &quot;Civil&quot;, 1, 25, True) print(&quot; nStudent ex Result&quot;) student_ex.print_result() . Student ex Result Congrats, you can move to next term. . Further Resources for Class . If you want to learn more about Object Oriented Programming (OOP) in more details, please visit to official Python documentation. You can also check this blog post about OOP. . Icons made by Freepik from www.flaticon.com",
            "url": "https://ytu-cvlab.github.io/mce-51069/python/2020/12/14/week1-day2.html",
            "relUrl": "/python/2020/12/14/week1-day2.html",
            "date": " • Dec 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 1, Day 1 (Introduction to the course)",
            "content": "Anaconda and Jupyter Notebook . Anaconda is a Data Science Platform, which comes with Data Science related packages and libraries, such as numpy and matplotlib, in Python. The aforementioned reason for using Anaconda is just one of the many good reasons and there are certainly other benefits. If you are interested in it, Please visit their website to explore more. . In this course, we decide to get Anaconda installed for every student, and make the installation video guides for Anaconda available in this website. . Jupyter Notebook is an open source, web application that allow users to create and share documents that contain live codes, equations, visualizations and narrative text. Quote :Jupyter.org . Anaconda Installation on Windows . . Anaconda Installation on Mac . . How to use Jupyter Notebook . . Student ID and Attendance . Please fill out this form from this link to get your student ID. . We will record attendance in every session with google forms provided only in zoom chat. . Assignment . Please submit your week 1 assignments from this link. We will return your assignment scores after the deadline day (you can check on your submission form). Please note that we will return your final grade only if you submit all the assignments. .",
            "url": "https://ytu-cvlab.github.io/mce-51069/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "relUrl": "/assignment/installation_guide/student_id/2020/12/12/week1-day1.html",
            "date": " • Dec 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": ".",
          "url": "https://ytu-cvlab.github.io/mce-51069/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ytu-cvlab.github.io/mce-51069/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}